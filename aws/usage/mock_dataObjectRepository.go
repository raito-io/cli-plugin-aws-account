// Code generated by mockery v2.47.0. DO NOT EDIT.

package usage

import (
	context "context"

	config "github.com/raito-io/cli/base/util/config"

	mock "github.com/stretchr/testify/mock"

	trie "github.com/raito-io/cli-plugin-aws-account/aws/utils/trie"
)

// MockdataObjectRepository is an autogenerated mock type for the dataObjectRepository type
type MockdataObjectRepository struct {
	mock.Mock
}

type MockdataObjectRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdataObjectRepository) EXPECT() *MockdataObjectRepository_Expecter {
	return &MockdataObjectRepository_Expecter{mock: &_m.Mock}
}

// GetAvailableObjectTypes provides a mock function with given fields: ctx, cfg
func (_m *MockdataObjectRepository) GetAvailableObjectTypes(ctx context.Context, cfg *config.ConfigMap) (*trie.Trie[string], error) {
	ret := _m.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableObjectTypes")
	}

	var r0 *trie.Trie[string]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) (*trie.Trie[string], error)); ok {
		return rf(ctx, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) *trie.Trie[string]); ok {
		r0 = rf(ctx, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*trie.Trie[string])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap) error); ok {
		r1 = rf(ctx, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataObjectRepository_GetAvailableObjectTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableObjectTypes'
type MockdataObjectRepository_GetAvailableObjectTypes_Call struct {
	*mock.Call
}

// GetAvailableObjectTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg *config.ConfigMap
func (_e *MockdataObjectRepository_Expecter) GetAvailableObjectTypes(ctx interface{}, cfg interface{}) *MockdataObjectRepository_GetAvailableObjectTypes_Call {
	return &MockdataObjectRepository_GetAvailableObjectTypes_Call{Call: _e.mock.On("GetAvailableObjectTypes", ctx, cfg)}
}

func (_c *MockdataObjectRepository_GetAvailableObjectTypes_Call) Run(run func(ctx context.Context, cfg *config.ConfigMap)) *MockdataObjectRepository_GetAvailableObjectTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap))
	})
	return _c
}

func (_c *MockdataObjectRepository_GetAvailableObjectTypes_Call) Return(_a0 *trie.Trie[string], _a1 error) *MockdataObjectRepository_GetAvailableObjectTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataObjectRepository_GetAvailableObjectTypes_Call) RunAndReturn(run func(context.Context, *config.ConfigMap) (*trie.Trie[string], error)) *MockdataObjectRepository_GetAvailableObjectTypes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdataObjectRepository creates a new instance of MockdataObjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdataObjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdataObjectRepository {
	mock := &MockdataObjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
