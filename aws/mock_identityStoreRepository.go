// Code generated by mockery v2.27.1. DO NOT EDIT.

package aws

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockIdentityStoreRepository is an autogenerated mock type for the identityStoreRepository type
type mockIdentityStoreRepository struct {
	mock.Mock
}

type mockIdentityStoreRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIdentityStoreRepository) EXPECT() *mockIdentityStoreRepository_Expecter {
	return &mockIdentityStoreRepository_Expecter{mock: &_m.Mock}
}

// GetGroups provides a mock function with given fields: ctx
func (_m *mockIdentityStoreRepository) GetGroups(ctx context.Context) ([]GroupEntity, error) {
	ret := _m.Called(ctx)

	var r0 []GroupEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]GroupEntity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []GroupEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GroupEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockIdentityStoreRepository_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type mockIdentityStoreRepository_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockIdentityStoreRepository_Expecter) GetGroups(ctx interface{}) *mockIdentityStoreRepository_GetGroups_Call {
	return &mockIdentityStoreRepository_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx)}
}

func (_c *mockIdentityStoreRepository_GetGroups_Call) Run(run func(ctx context.Context)) *mockIdentityStoreRepository_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockIdentityStoreRepository_GetGroups_Call) Return(_a0 []GroupEntity, _a1 error) *mockIdentityStoreRepository_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockIdentityStoreRepository_GetGroups_Call) RunAndReturn(run func(context.Context) ([]GroupEntity, error)) *mockIdentityStoreRepository_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields: ctx
func (_m *mockIdentityStoreRepository) GetRoles(ctx context.Context) ([]RoleEntity, error) {
	ret := _m.Called(ctx)

	var r0 []RoleEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]RoleEntity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []RoleEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockIdentityStoreRepository_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type mockIdentityStoreRepository_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockIdentityStoreRepository_Expecter) GetRoles(ctx interface{}) *mockIdentityStoreRepository_GetRoles_Call {
	return &mockIdentityStoreRepository_GetRoles_Call{Call: _e.mock.On("GetRoles", ctx)}
}

func (_c *mockIdentityStoreRepository_GetRoles_Call) Run(run func(ctx context.Context)) *mockIdentityStoreRepository_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockIdentityStoreRepository_GetRoles_Call) Return(_a0 []RoleEntity, _a1 error) *mockIdentityStoreRepository_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockIdentityStoreRepository_GetRoles_Call) RunAndReturn(run func(context.Context) ([]RoleEntity, error)) *mockIdentityStoreRepository_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, withDetails
func (_m *mockIdentityStoreRepository) GetUsers(ctx context.Context, withDetails bool) ([]UserEntity, error) {
	ret := _m.Called(ctx, withDetails)

	var r0 []UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) ([]UserEntity, error)); ok {
		return rf(ctx, withDetails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) []UserEntity); ok {
		r0 = rf(ctx, withDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, withDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockIdentityStoreRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type mockIdentityStoreRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - withDetails bool
func (_e *mockIdentityStoreRepository_Expecter) GetUsers(ctx interface{}, withDetails interface{}) *mockIdentityStoreRepository_GetUsers_Call {
	return &mockIdentityStoreRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, withDetails)}
}

func (_c *mockIdentityStoreRepository_GetUsers_Call) Run(run func(ctx context.Context, withDetails bool)) *mockIdentityStoreRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *mockIdentityStoreRepository_GetUsers_Call) Return(_a0 []UserEntity, _a1 error) *mockIdentityStoreRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockIdentityStoreRepository_GetUsers_Call) RunAndReturn(run func(context.Context, bool) ([]UserEntity, error)) *mockIdentityStoreRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockIdentityStoreRepository interface {
	mock.TestingT
	Cleanup(func())
}

// newMockIdentityStoreRepository creates a new instance of mockIdentityStoreRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockIdentityStoreRepository(t mockConstructorTestingTnewMockIdentityStoreRepository) *mockIdentityStoreRepository {
	mock := &mockIdentityStoreRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
