// Code generated by mockery v2.47.0. DO NOT EDIT.

package data_access

import (
	awspolicy "github.com/n4ch04/aws-policy"
	config "github.com/raito-io/cli/base/util/config"

	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/raito-io/cli-plugin-aws-account/aws/model"

	types "github.com/aws/aws-sdk-go-v2/service/iam/types"
)

// MockdataAccessRepository is an autogenerated mock type for the dataAccessRepository type
type MockdataAccessRepository struct {
	mock.Mock
}

type MockdataAccessRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdataAccessRepository) EXPECT() *MockdataAccessRepository_Expecter {
	return &MockdataAccessRepository_Expecter{mock: &_m.Mock}
}

// AttachGroupToManagedPolicy provides a mock function with given fields: ctx, policyArn, groupNames
func (_m *MockdataAccessRepository) AttachGroupToManagedPolicy(ctx context.Context, policyArn string, groupNames []string) error {
	ret := _m.Called(ctx, policyArn, groupNames)

	if len(ret) == 0 {
		panic("no return value specified for AttachGroupToManagedPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, policyArn, groupNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_AttachGroupToManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachGroupToManagedPolicy'
type MockdataAccessRepository_AttachGroupToManagedPolicy_Call struct {
	*mock.Call
}

// AttachGroupToManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyArn string
//   - groupNames []string
func (_e *MockdataAccessRepository_Expecter) AttachGroupToManagedPolicy(ctx interface{}, policyArn interface{}, groupNames interface{}) *MockdataAccessRepository_AttachGroupToManagedPolicy_Call {
	return &MockdataAccessRepository_AttachGroupToManagedPolicy_Call{Call: _e.mock.On("AttachGroupToManagedPolicy", ctx, policyArn, groupNames)}
}

func (_c *MockdataAccessRepository_AttachGroupToManagedPolicy_Call) Run(run func(ctx context.Context, policyArn string, groupNames []string)) *MockdataAccessRepository_AttachGroupToManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockdataAccessRepository_AttachGroupToManagedPolicy_Call) Return(_a0 error) *MockdataAccessRepository_AttachGroupToManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_AttachGroupToManagedPolicy_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockdataAccessRepository_AttachGroupToManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AttachRoleToManagedPolicy provides a mock function with given fields: ctx, policyArn, roleNames
func (_m *MockdataAccessRepository) AttachRoleToManagedPolicy(ctx context.Context, policyArn string, roleNames []string) error {
	ret := _m.Called(ctx, policyArn, roleNames)

	if len(ret) == 0 {
		panic("no return value specified for AttachRoleToManagedPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, policyArn, roleNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_AttachRoleToManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachRoleToManagedPolicy'
type MockdataAccessRepository_AttachRoleToManagedPolicy_Call struct {
	*mock.Call
}

// AttachRoleToManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyArn string
//   - roleNames []string
func (_e *MockdataAccessRepository_Expecter) AttachRoleToManagedPolicy(ctx interface{}, policyArn interface{}, roleNames interface{}) *MockdataAccessRepository_AttachRoleToManagedPolicy_Call {
	return &MockdataAccessRepository_AttachRoleToManagedPolicy_Call{Call: _e.mock.On("AttachRoleToManagedPolicy", ctx, policyArn, roleNames)}
}

func (_c *MockdataAccessRepository_AttachRoleToManagedPolicy_Call) Run(run func(ctx context.Context, policyArn string, roleNames []string)) *MockdataAccessRepository_AttachRoleToManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockdataAccessRepository_AttachRoleToManagedPolicy_Call) Return(_a0 error) *MockdataAccessRepository_AttachRoleToManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_AttachRoleToManagedPolicy_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockdataAccessRepository_AttachRoleToManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AttachUserToManagedPolicy provides a mock function with given fields: ctx, policyArn, userNames
func (_m *MockdataAccessRepository) AttachUserToManagedPolicy(ctx context.Context, policyArn string, userNames []string) error {
	ret := _m.Called(ctx, policyArn, userNames)

	if len(ret) == 0 {
		panic("no return value specified for AttachUserToManagedPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, policyArn, userNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_AttachUserToManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachUserToManagedPolicy'
type MockdataAccessRepository_AttachUserToManagedPolicy_Call struct {
	*mock.Call
}

// AttachUserToManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyArn string
//   - userNames []string
func (_e *MockdataAccessRepository_Expecter) AttachUserToManagedPolicy(ctx interface{}, policyArn interface{}, userNames interface{}) *MockdataAccessRepository_AttachUserToManagedPolicy_Call {
	return &MockdataAccessRepository_AttachUserToManagedPolicy_Call{Call: _e.mock.On("AttachUserToManagedPolicy", ctx, policyArn, userNames)}
}

func (_c *MockdataAccessRepository_AttachUserToManagedPolicy_Call) Run(run func(ctx context.Context, policyArn string, userNames []string)) *MockdataAccessRepository_AttachUserToManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockdataAccessRepository_AttachUserToManagedPolicy_Call) Return(_a0 error) *MockdataAccessRepository_AttachUserToManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_AttachUserToManagedPolicy_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockdataAccessRepository_AttachUserToManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ClearCache provides a mock function with given fields:
func (_m *MockdataAccessRepository) ClearCache() {
	_m.Called()
}

// MockdataAccessRepository_ClearCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearCache'
type MockdataAccessRepository_ClearCache_Call struct {
	*mock.Call
}

// ClearCache is a helper method to define mock.On call
func (_e *MockdataAccessRepository_Expecter) ClearCache() *MockdataAccessRepository_ClearCache_Call {
	return &MockdataAccessRepository_ClearCache_Call{Call: _e.mock.On("ClearCache")}
}

func (_c *MockdataAccessRepository_ClearCache_Call) Run(run func()) *MockdataAccessRepository_ClearCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockdataAccessRepository_ClearCache_Call) Return() *MockdataAccessRepository_ClearCache_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockdataAccessRepository_ClearCache_Call) RunAndReturn(run func()) *MockdataAccessRepository_ClearCache_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessPoint provides a mock function with given fields: ctx, name, bucket, region, statements
func (_m *MockdataAccessRepository) CreateAccessPoint(ctx context.Context, name string, bucket string, region string, statements []*awspolicy.Statement) (string, error) {
	ret := _m.Called(ctx, name, bucket, region, statements)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessPoint")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*awspolicy.Statement) (string, error)); ok {
		return rf(ctx, name, bucket, region, statements)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*awspolicy.Statement) string); ok {
		r0 = rf(ctx, name, bucket, region, statements)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []*awspolicy.Statement) error); ok {
		r1 = rf(ctx, name, bucket, region, statements)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessRepository_CreateAccessPoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessPoint'
type MockdataAccessRepository_CreateAccessPoint_Call struct {
	*mock.Call
}

// CreateAccessPoint is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - bucket string
//   - region string
//   - statements []*awspolicy.Statement
func (_e *MockdataAccessRepository_Expecter) CreateAccessPoint(ctx interface{}, name interface{}, bucket interface{}, region interface{}, statements interface{}) *MockdataAccessRepository_CreateAccessPoint_Call {
	return &MockdataAccessRepository_CreateAccessPoint_Call{Call: _e.mock.On("CreateAccessPoint", ctx, name, bucket, region, statements)}
}

func (_c *MockdataAccessRepository_CreateAccessPoint_Call) Run(run func(ctx context.Context, name string, bucket string, region string, statements []*awspolicy.Statement)) *MockdataAccessRepository_CreateAccessPoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]*awspolicy.Statement))
	})
	return _c
}

func (_c *MockdataAccessRepository_CreateAccessPoint_Call) Return(_a0 string, _a1 error) *MockdataAccessRepository_CreateAccessPoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessRepository_CreateAccessPoint_Call) RunAndReturn(run func(context.Context, string, string, string, []*awspolicy.Statement) (string, error)) *MockdataAccessRepository_CreateAccessPoint_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManagedPolicy provides a mock function with given fields: ctx, policyName, statements
func (_m *MockdataAccessRepository) CreateManagedPolicy(ctx context.Context, policyName string, statements []*awspolicy.Statement) (*types.Policy, error) {
	ret := _m.Called(ctx, policyName, statements)

	if len(ret) == 0 {
		panic("no return value specified for CreateManagedPolicy")
	}

	var r0 *types.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*awspolicy.Statement) (*types.Policy, error)); ok {
		return rf(ctx, policyName, statements)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*awspolicy.Statement) *types.Policy); ok {
		r0 = rf(ctx, policyName, statements)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*awspolicy.Statement) error); ok {
		r1 = rf(ctx, policyName, statements)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessRepository_CreateManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManagedPolicy'
type MockdataAccessRepository_CreateManagedPolicy_Call struct {
	*mock.Call
}

// CreateManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyName string
//   - statements []*awspolicy.Statement
func (_e *MockdataAccessRepository_Expecter) CreateManagedPolicy(ctx interface{}, policyName interface{}, statements interface{}) *MockdataAccessRepository_CreateManagedPolicy_Call {
	return &MockdataAccessRepository_CreateManagedPolicy_Call{Call: _e.mock.On("CreateManagedPolicy", ctx, policyName, statements)}
}

func (_c *MockdataAccessRepository_CreateManagedPolicy_Call) Run(run func(ctx context.Context, policyName string, statements []*awspolicy.Statement)) *MockdataAccessRepository_CreateManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]*awspolicy.Statement))
	})
	return _c
}

func (_c *MockdataAccessRepository_CreateManagedPolicy_Call) Return(_a0 *types.Policy, _a1 error) *MockdataAccessRepository_CreateManagedPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessRepository_CreateManagedPolicy_Call) RunAndReturn(run func(context.Context, string, []*awspolicy.Statement) (*types.Policy, error)) *MockdataAccessRepository_CreateManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: ctx, name, description, userNames
func (_m *MockdataAccessRepository) CreateRole(ctx context.Context, name string, description string, userNames []string) (bool, error) {
	ret := _m.Called(ctx, name, description, userNames)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (bool, error)); ok {
		return rf(ctx, name, description, userNames)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) bool); ok {
		r0 = rf(ctx, name, description, userNames)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, name, description, userNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessRepository_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type MockdataAccessRepository_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
//   - userNames []string
func (_e *MockdataAccessRepository_Expecter) CreateRole(ctx interface{}, name interface{}, description interface{}, userNames interface{}) *MockdataAccessRepository_CreateRole_Call {
	return &MockdataAccessRepository_CreateRole_Call{Call: _e.mock.On("CreateRole", ctx, name, description, userNames)}
}

func (_c *MockdataAccessRepository_CreateRole_Call) Run(run func(ctx context.Context, name string, description string, userNames []string)) *MockdataAccessRepository_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *MockdataAccessRepository_CreateRole_Call) Return(_a0 bool, _a1 error) *MockdataAccessRepository_CreateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessRepository_CreateRole_Call) RunAndReturn(run func(context.Context, string, string, []string) (bool, error)) *MockdataAccessRepository_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoleInlinePolicy provides a mock function with given fields: ctx, roleName, policyName, statements
func (_m *MockdataAccessRepository) CreateRoleInlinePolicy(ctx context.Context, roleName string, policyName string, statements []*awspolicy.Statement) error {
	ret := _m.Called(ctx, roleName, policyName, statements)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleInlinePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*awspolicy.Statement) error); ok {
		r0 = rf(ctx, roleName, policyName, statements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_CreateRoleInlinePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoleInlinePolicy'
type MockdataAccessRepository_CreateRoleInlinePolicy_Call struct {
	*mock.Call
}

// CreateRoleInlinePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - roleName string
//   - policyName string
//   - statements []*awspolicy.Statement
func (_e *MockdataAccessRepository_Expecter) CreateRoleInlinePolicy(ctx interface{}, roleName interface{}, policyName interface{}, statements interface{}) *MockdataAccessRepository_CreateRoleInlinePolicy_Call {
	return &MockdataAccessRepository_CreateRoleInlinePolicy_Call{Call: _e.mock.On("CreateRoleInlinePolicy", ctx, roleName, policyName, statements)}
}

func (_c *MockdataAccessRepository_CreateRoleInlinePolicy_Call) Run(run func(ctx context.Context, roleName string, policyName string, statements []*awspolicy.Statement)) *MockdataAccessRepository_CreateRoleInlinePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]*awspolicy.Statement))
	})
	return _c
}

func (_c *MockdataAccessRepository_CreateRoleInlinePolicy_Call) Return(_a0 error) *MockdataAccessRepository_CreateRoleInlinePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_CreateRoleInlinePolicy_Call) RunAndReturn(run func(context.Context, string, string, []*awspolicy.Statement) error) *MockdataAccessRepository_CreateRoleInlinePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessPoint provides a mock function with given fields: ctx, name, region
func (_m *MockdataAccessRepository) DeleteAccessPoint(ctx context.Context, name string, region string) error {
	ret := _m.Called(ctx, name, region)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessPoint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, region)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_DeleteAccessPoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessPoint'
type MockdataAccessRepository_DeleteAccessPoint_Call struct {
	*mock.Call
}

// DeleteAccessPoint is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - region string
func (_e *MockdataAccessRepository_Expecter) DeleteAccessPoint(ctx interface{}, name interface{}, region interface{}) *MockdataAccessRepository_DeleteAccessPoint_Call {
	return &MockdataAccessRepository_DeleteAccessPoint_Call{Call: _e.mock.On("DeleteAccessPoint", ctx, name, region)}
}

func (_c *MockdataAccessRepository_DeleteAccessPoint_Call) Run(run func(ctx context.Context, name string, region string)) *MockdataAccessRepository_DeleteAccessPoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockdataAccessRepository_DeleteAccessPoint_Call) Return(_a0 error) *MockdataAccessRepository_DeleteAccessPoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_DeleteAccessPoint_Call) RunAndReturn(run func(context.Context, string, string) error) *MockdataAccessRepository_DeleteAccessPoint_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInlinePolicy provides a mock function with given fields: ctx, policyName, resourceName, resourceType
func (_m *MockdataAccessRepository) DeleteInlinePolicy(ctx context.Context, policyName string, resourceName string, resourceType string) error {
	ret := _m.Called(ctx, policyName, resourceName, resourceType)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInlinePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, policyName, resourceName, resourceType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_DeleteInlinePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInlinePolicy'
type MockdataAccessRepository_DeleteInlinePolicy_Call struct {
	*mock.Call
}

// DeleteInlinePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyName string
//   - resourceName string
//   - resourceType string
func (_e *MockdataAccessRepository_Expecter) DeleteInlinePolicy(ctx interface{}, policyName interface{}, resourceName interface{}, resourceType interface{}) *MockdataAccessRepository_DeleteInlinePolicy_Call {
	return &MockdataAccessRepository_DeleteInlinePolicy_Call{Call: _e.mock.On("DeleteInlinePolicy", ctx, policyName, resourceName, resourceType)}
}

func (_c *MockdataAccessRepository_DeleteInlinePolicy_Call) Run(run func(ctx context.Context, policyName string, resourceName string, resourceType string)) *MockdataAccessRepository_DeleteInlinePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockdataAccessRepository_DeleteInlinePolicy_Call) Return(_a0 error) *MockdataAccessRepository_DeleteInlinePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_DeleteInlinePolicy_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockdataAccessRepository_DeleteInlinePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedPolicy provides a mock function with given fields: ctx, policyName, awsManaged
func (_m *MockdataAccessRepository) DeleteManagedPolicy(ctx context.Context, policyName string, awsManaged bool) error {
	ret := _m.Called(ctx, policyName, awsManaged)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManagedPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, policyName, awsManaged)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_DeleteManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedPolicy'
type MockdataAccessRepository_DeleteManagedPolicy_Call struct {
	*mock.Call
}

// DeleteManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyName string
//   - awsManaged bool
func (_e *MockdataAccessRepository_Expecter) DeleteManagedPolicy(ctx interface{}, policyName interface{}, awsManaged interface{}) *MockdataAccessRepository_DeleteManagedPolicy_Call {
	return &MockdataAccessRepository_DeleteManagedPolicy_Call{Call: _e.mock.On("DeleteManagedPolicy", ctx, policyName, awsManaged)}
}

func (_c *MockdataAccessRepository_DeleteManagedPolicy_Call) Run(run func(ctx context.Context, policyName string, awsManaged bool)) *MockdataAccessRepository_DeleteManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockdataAccessRepository_DeleteManagedPolicy_Call) Return(_a0 error) *MockdataAccessRepository_DeleteManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_DeleteManagedPolicy_Call) RunAndReturn(run func(context.Context, string, bool) error) *MockdataAccessRepository_DeleteManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: ctx, name
func (_m *MockdataAccessRepository) DeleteRole(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type MockdataAccessRepository_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockdataAccessRepository_Expecter) DeleteRole(ctx interface{}, name interface{}) *MockdataAccessRepository_DeleteRole_Call {
	return &MockdataAccessRepository_DeleteRole_Call{Call: _e.mock.On("DeleteRole", ctx, name)}
}

func (_c *MockdataAccessRepository_DeleteRole_Call) Run(run func(ctx context.Context, name string)) *MockdataAccessRepository_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockdataAccessRepository_DeleteRole_Call) Return(_a0 error) *MockdataAccessRepository_DeleteRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_DeleteRole_Call) RunAndReturn(run func(context.Context, string) error) *MockdataAccessRepository_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleInlinePolicies provides a mock function with given fields: ctx, roleName
func (_m *MockdataAccessRepository) DeleteRoleInlinePolicies(ctx context.Context, roleName string) error {
	ret := _m.Called(ctx, roleName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleInlinePolicies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_DeleteRoleInlinePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleInlinePolicies'
type MockdataAccessRepository_DeleteRoleInlinePolicies_Call struct {
	*mock.Call
}

// DeleteRoleInlinePolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - roleName string
func (_e *MockdataAccessRepository_Expecter) DeleteRoleInlinePolicies(ctx interface{}, roleName interface{}) *MockdataAccessRepository_DeleteRoleInlinePolicies_Call {
	return &MockdataAccessRepository_DeleteRoleInlinePolicies_Call{Call: _e.mock.On("DeleteRoleInlinePolicies", ctx, roleName)}
}

func (_c *MockdataAccessRepository_DeleteRoleInlinePolicies_Call) Run(run func(ctx context.Context, roleName string)) *MockdataAccessRepository_DeleteRoleInlinePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockdataAccessRepository_DeleteRoleInlinePolicies_Call) Return(_a0 error) *MockdataAccessRepository_DeleteRoleInlinePolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_DeleteRoleInlinePolicies_Call) RunAndReturn(run func(context.Context, string) error) *MockdataAccessRepository_DeleteRoleInlinePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// DetachGroupFromManagedPolicy provides a mock function with given fields: ctx, policyArn, groupNames
func (_m *MockdataAccessRepository) DetachGroupFromManagedPolicy(ctx context.Context, policyArn string, groupNames []string) error {
	ret := _m.Called(ctx, policyArn, groupNames)

	if len(ret) == 0 {
		panic("no return value specified for DetachGroupFromManagedPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, policyArn, groupNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_DetachGroupFromManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachGroupFromManagedPolicy'
type MockdataAccessRepository_DetachGroupFromManagedPolicy_Call struct {
	*mock.Call
}

// DetachGroupFromManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyArn string
//   - groupNames []string
func (_e *MockdataAccessRepository_Expecter) DetachGroupFromManagedPolicy(ctx interface{}, policyArn interface{}, groupNames interface{}) *MockdataAccessRepository_DetachGroupFromManagedPolicy_Call {
	return &MockdataAccessRepository_DetachGroupFromManagedPolicy_Call{Call: _e.mock.On("DetachGroupFromManagedPolicy", ctx, policyArn, groupNames)}
}

func (_c *MockdataAccessRepository_DetachGroupFromManagedPolicy_Call) Run(run func(ctx context.Context, policyArn string, groupNames []string)) *MockdataAccessRepository_DetachGroupFromManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockdataAccessRepository_DetachGroupFromManagedPolicy_Call) Return(_a0 error) *MockdataAccessRepository_DetachGroupFromManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_DetachGroupFromManagedPolicy_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockdataAccessRepository_DetachGroupFromManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DetachRoleFromManagedPolicy provides a mock function with given fields: ctx, policyArn, roleNames
func (_m *MockdataAccessRepository) DetachRoleFromManagedPolicy(ctx context.Context, policyArn string, roleNames []string) error {
	ret := _m.Called(ctx, policyArn, roleNames)

	if len(ret) == 0 {
		panic("no return value specified for DetachRoleFromManagedPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, policyArn, roleNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_DetachRoleFromManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachRoleFromManagedPolicy'
type MockdataAccessRepository_DetachRoleFromManagedPolicy_Call struct {
	*mock.Call
}

// DetachRoleFromManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyArn string
//   - roleNames []string
func (_e *MockdataAccessRepository_Expecter) DetachRoleFromManagedPolicy(ctx interface{}, policyArn interface{}, roleNames interface{}) *MockdataAccessRepository_DetachRoleFromManagedPolicy_Call {
	return &MockdataAccessRepository_DetachRoleFromManagedPolicy_Call{Call: _e.mock.On("DetachRoleFromManagedPolicy", ctx, policyArn, roleNames)}
}

func (_c *MockdataAccessRepository_DetachRoleFromManagedPolicy_Call) Run(run func(ctx context.Context, policyArn string, roleNames []string)) *MockdataAccessRepository_DetachRoleFromManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockdataAccessRepository_DetachRoleFromManagedPolicy_Call) Return(_a0 error) *MockdataAccessRepository_DetachRoleFromManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_DetachRoleFromManagedPolicy_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockdataAccessRepository_DetachRoleFromManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DetachUserFromManagedPolicy provides a mock function with given fields: ctx, policyArn, userNames
func (_m *MockdataAccessRepository) DetachUserFromManagedPolicy(ctx context.Context, policyArn string, userNames []string) error {
	ret := _m.Called(ctx, policyArn, userNames)

	if len(ret) == 0 {
		panic("no return value specified for DetachUserFromManagedPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, policyArn, userNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_DetachUserFromManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachUserFromManagedPolicy'
type MockdataAccessRepository_DetachUserFromManagedPolicy_Call struct {
	*mock.Call
}

// DetachUserFromManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyArn string
//   - userNames []string
func (_e *MockdataAccessRepository_Expecter) DetachUserFromManagedPolicy(ctx interface{}, policyArn interface{}, userNames interface{}) *MockdataAccessRepository_DetachUserFromManagedPolicy_Call {
	return &MockdataAccessRepository_DetachUserFromManagedPolicy_Call{Call: _e.mock.On("DetachUserFromManagedPolicy", ctx, policyArn, userNames)}
}

func (_c *MockdataAccessRepository_DetachUserFromManagedPolicy_Call) Run(run func(ctx context.Context, policyArn string, userNames []string)) *MockdataAccessRepository_DetachUserFromManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockdataAccessRepository_DetachUserFromManagedPolicy_Call) Return(_a0 error) *MockdataAccessRepository_DetachUserFromManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_DetachUserFromManagedPolicy_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockdataAccessRepository_DetachUserFromManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields: ctx
func (_m *MockdataAccessRepository) GetGroups(ctx context.Context) ([]model.GroupEntity, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 []model.GroupEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.GroupEntity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.GroupEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GroupEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessRepository_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MockdataAccessRepository_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockdataAccessRepository_Expecter) GetGroups(ctx interface{}) *MockdataAccessRepository_GetGroups_Call {
	return &MockdataAccessRepository_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx)}
}

func (_c *MockdataAccessRepository_GetGroups_Call) Run(run func(ctx context.Context)) *MockdataAccessRepository_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockdataAccessRepository_GetGroups_Call) Return(_a0 []model.GroupEntity, _a1 error) *MockdataAccessRepository_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessRepository_GetGroups_Call) RunAndReturn(run func(context.Context) ([]model.GroupEntity, error)) *MockdataAccessRepository_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetInlinePoliciesForEntities provides a mock function with given fields: ctx, entityNames, entityType
func (_m *MockdataAccessRepository) GetInlinePoliciesForEntities(ctx context.Context, entityNames []string, entityType string) (map[string][]model.PolicyEntity, error) {
	ret := _m.Called(ctx, entityNames, entityType)

	if len(ret) == 0 {
		panic("no return value specified for GetInlinePoliciesForEntities")
	}

	var r0 map[string][]model.PolicyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) (map[string][]model.PolicyEntity, error)); ok {
		return rf(ctx, entityNames, entityType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) map[string][]model.PolicyEntity); ok {
		r0 = rf(ctx, entityNames, entityType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]model.PolicyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, entityNames, entityType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessRepository_GetInlinePoliciesForEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInlinePoliciesForEntities'
type MockdataAccessRepository_GetInlinePoliciesForEntities_Call struct {
	*mock.Call
}

// GetInlinePoliciesForEntities is a helper method to define mock.On call
//   - ctx context.Context
//   - entityNames []string
//   - entityType string
func (_e *MockdataAccessRepository_Expecter) GetInlinePoliciesForEntities(ctx interface{}, entityNames interface{}, entityType interface{}) *MockdataAccessRepository_GetInlinePoliciesForEntities_Call {
	return &MockdataAccessRepository_GetInlinePoliciesForEntities_Call{Call: _e.mock.On("GetInlinePoliciesForEntities", ctx, entityNames, entityType)}
}

func (_c *MockdataAccessRepository_GetInlinePoliciesForEntities_Call) Run(run func(ctx context.Context, entityNames []string, entityType string)) *MockdataAccessRepository_GetInlinePoliciesForEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(string))
	})
	return _c
}

func (_c *MockdataAccessRepository_GetInlinePoliciesForEntities_Call) Return(_a0 map[string][]model.PolicyEntity, _a1 error) *MockdataAccessRepository_GetInlinePoliciesForEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessRepository_GetInlinePoliciesForEntities_Call) RunAndReturn(run func(context.Context, []string, string) (map[string][]model.PolicyEntity, error)) *MockdataAccessRepository_GetInlinePoliciesForEntities_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedPolicies provides a mock function with given fields: ctx
func (_m *MockdataAccessRepository) GetManagedPolicies(ctx context.Context) ([]model.PolicyEntity, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedPolicies")
	}

	var r0 []model.PolicyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.PolicyEntity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.PolicyEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PolicyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessRepository_GetManagedPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedPolicies'
type MockdataAccessRepository_GetManagedPolicies_Call struct {
	*mock.Call
}

// GetManagedPolicies is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockdataAccessRepository_Expecter) GetManagedPolicies(ctx interface{}) *MockdataAccessRepository_GetManagedPolicies_Call {
	return &MockdataAccessRepository_GetManagedPolicies_Call{Call: _e.mock.On("GetManagedPolicies", ctx)}
}

func (_c *MockdataAccessRepository_GetManagedPolicies_Call) Run(run func(ctx context.Context)) *MockdataAccessRepository_GetManagedPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockdataAccessRepository_GetManagedPolicies_Call) Return(_a0 []model.PolicyEntity, _a1 error) *MockdataAccessRepository_GetManagedPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessRepository_GetManagedPolicies_Call) RunAndReturn(run func(context.Context) ([]model.PolicyEntity, error)) *MockdataAccessRepository_GetManagedPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyArn provides a mock function with given fields: policyName, awsManaged, configMap
func (_m *MockdataAccessRepository) GetPolicyArn(policyName string, awsManaged bool, configMap *config.ConfigMap) string {
	ret := _m.Called(policyName, awsManaged, configMap)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyArn")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, bool, *config.ConfigMap) string); ok {
		r0 = rf(policyName, awsManaged, configMap)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockdataAccessRepository_GetPolicyArn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyArn'
type MockdataAccessRepository_GetPolicyArn_Call struct {
	*mock.Call
}

// GetPolicyArn is a helper method to define mock.On call
//   - policyName string
//   - awsManaged bool
//   - configMap *config.ConfigMap
func (_e *MockdataAccessRepository_Expecter) GetPolicyArn(policyName interface{}, awsManaged interface{}, configMap interface{}) *MockdataAccessRepository_GetPolicyArn_Call {
	return &MockdataAccessRepository_GetPolicyArn_Call{Call: _e.mock.On("GetPolicyArn", policyName, awsManaged, configMap)}
}

func (_c *MockdataAccessRepository_GetPolicyArn_Call) Run(run func(policyName string, awsManaged bool, configMap *config.ConfigMap)) *MockdataAccessRepository_GetPolicyArn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool), args[2].(*config.ConfigMap))
	})
	return _c
}

func (_c *MockdataAccessRepository_GetPolicyArn_Call) Return(_a0 string) *MockdataAccessRepository_GetPolicyArn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_GetPolicyArn_Call) RunAndReturn(run func(string, bool, *config.ConfigMap) string) *MockdataAccessRepository_GetPolicyArn_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields: ctx, excludedRoles
func (_m *MockdataAccessRepository) GetRoles(ctx context.Context, excludedRoles []string) ([]model.RoleEntity, error) {
	ret := _m.Called(ctx, excludedRoles)

	if len(ret) == 0 {
		panic("no return value specified for GetRoles")
	}

	var r0 []model.RoleEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]model.RoleEntity, error)); ok {
		return rf(ctx, excludedRoles)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []model.RoleEntity); ok {
		r0 = rf(ctx, excludedRoles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RoleEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, excludedRoles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessRepository_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type MockdataAccessRepository_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - excludedRoles []string
func (_e *MockdataAccessRepository_Expecter) GetRoles(ctx interface{}, excludedRoles interface{}) *MockdataAccessRepository_GetRoles_Call {
	return &MockdataAccessRepository_GetRoles_Call{Call: _e.mock.On("GetRoles", ctx, excludedRoles)}
}

func (_c *MockdataAccessRepository_GetRoles_Call) Run(run func(ctx context.Context, excludedRoles []string)) *MockdataAccessRepository_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockdataAccessRepository_GetRoles_Call) Return(_a0 []model.RoleEntity, _a1 error) *MockdataAccessRepository_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessRepository_GetRoles_Call) RunAndReturn(run func(context.Context, []string) ([]model.RoleEntity, error)) *MockdataAccessRepository_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetSsoRoleWithPrefix provides a mock function with given fields: ctx, prefixName, excludedRoles
func (_m *MockdataAccessRepository) GetSsoRoleWithPrefix(ctx context.Context, prefixName string, excludedRoles []string) (*model.RoleEntity, error) {
	ret := _m.Called(ctx, prefixName, excludedRoles)

	if len(ret) == 0 {
		panic("no return value specified for GetSsoRoleWithPrefix")
	}

	var r0 *model.RoleEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (*model.RoleEntity, error)); ok {
		return rf(ctx, prefixName, excludedRoles)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) *model.RoleEntity); ok {
		r0 = rf(ctx, prefixName, excludedRoles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RoleEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, prefixName, excludedRoles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessRepository_GetSsoRoleWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSsoRoleWithPrefix'
type MockdataAccessRepository_GetSsoRoleWithPrefix_Call struct {
	*mock.Call
}

// GetSsoRoleWithPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - prefixName string
//   - excludedRoles []string
func (_e *MockdataAccessRepository_Expecter) GetSsoRoleWithPrefix(ctx interface{}, prefixName interface{}, excludedRoles interface{}) *MockdataAccessRepository_GetSsoRoleWithPrefix_Call {
	return &MockdataAccessRepository_GetSsoRoleWithPrefix_Call{Call: _e.mock.On("GetSsoRoleWithPrefix", ctx, prefixName, excludedRoles)}
}

func (_c *MockdataAccessRepository_GetSsoRoleWithPrefix_Call) Run(run func(ctx context.Context, prefixName string, excludedRoles []string)) *MockdataAccessRepository_GetSsoRoleWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockdataAccessRepository_GetSsoRoleWithPrefix_Call) Return(_a0 *model.RoleEntity, _a1 error) *MockdataAccessRepository_GetSsoRoleWithPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessRepository_GetSsoRoleWithPrefix_Call) RunAndReturn(run func(context.Context, string, []string) (*model.RoleEntity, error)) *MockdataAccessRepository_GetSsoRoleWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, withDetails
func (_m *MockdataAccessRepository) GetUsers(ctx context.Context, withDetails bool) ([]model.UserEntity, error) {
	ret := _m.Called(ctx, withDetails)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []model.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) ([]model.UserEntity, error)); ok {
		return rf(ctx, withDetails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) []model.UserEntity); ok {
		r0 = rf(ctx, withDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, withDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockdataAccessRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - withDetails bool
func (_e *MockdataAccessRepository_Expecter) GetUsers(ctx interface{}, withDetails interface{}) *MockdataAccessRepository_GetUsers_Call {
	return &MockdataAccessRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, withDetails)}
}

func (_c *MockdataAccessRepository_GetUsers_Call) Run(run func(ctx context.Context, withDetails bool)) *MockdataAccessRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockdataAccessRepository_GetUsers_Call) Return(_a0 []model.UserEntity, _a1 error) *MockdataAccessRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessRepository_GetUsers_Call) RunAndReturn(run func(context.Context, bool) ([]model.UserEntity, error)) *MockdataAccessRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessPoints provides a mock function with given fields: ctx, region
func (_m *MockdataAccessRepository) ListAccessPoints(ctx context.Context, region string) ([]model.AwsS3AccessPoint, error) {
	ret := _m.Called(ctx, region)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessPoints")
	}

	var r0 []model.AwsS3AccessPoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.AwsS3AccessPoint, error)); ok {
		return rf(ctx, region)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.AwsS3AccessPoint); ok {
		r0 = rf(ctx, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AwsS3AccessPoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessRepository_ListAccessPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessPoints'
type MockdataAccessRepository_ListAccessPoints_Call struct {
	*mock.Call
}

// ListAccessPoints is a helper method to define mock.On call
//   - ctx context.Context
//   - region string
func (_e *MockdataAccessRepository_Expecter) ListAccessPoints(ctx interface{}, region interface{}) *MockdataAccessRepository_ListAccessPoints_Call {
	return &MockdataAccessRepository_ListAccessPoints_Call{Call: _e.mock.On("ListAccessPoints", ctx, region)}
}

func (_c *MockdataAccessRepository_ListAccessPoints_Call) Run(run func(ctx context.Context, region string)) *MockdataAccessRepository_ListAccessPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockdataAccessRepository_ListAccessPoints_Call) Return(_a0 []model.AwsS3AccessPoint, _a1 error) *MockdataAccessRepository_ListAccessPoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessRepository_ListAccessPoints_Call) RunAndReturn(run func(context.Context, string) ([]model.AwsS3AccessPoint, error)) *MockdataAccessRepository_ListAccessPoints_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessPoint provides a mock function with given fields: ctx, name, region, statements
func (_m *MockdataAccessRepository) UpdateAccessPoint(ctx context.Context, name string, region string, statements []*awspolicy.Statement) error {
	ret := _m.Called(ctx, name, region, statements)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessPoint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*awspolicy.Statement) error); ok {
		r0 = rf(ctx, name, region, statements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_UpdateAccessPoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessPoint'
type MockdataAccessRepository_UpdateAccessPoint_Call struct {
	*mock.Call
}

// UpdateAccessPoint is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - region string
//   - statements []*awspolicy.Statement
func (_e *MockdataAccessRepository_Expecter) UpdateAccessPoint(ctx interface{}, name interface{}, region interface{}, statements interface{}) *MockdataAccessRepository_UpdateAccessPoint_Call {
	return &MockdataAccessRepository_UpdateAccessPoint_Call{Call: _e.mock.On("UpdateAccessPoint", ctx, name, region, statements)}
}

func (_c *MockdataAccessRepository_UpdateAccessPoint_Call) Run(run func(ctx context.Context, name string, region string, statements []*awspolicy.Statement)) *MockdataAccessRepository_UpdateAccessPoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]*awspolicy.Statement))
	})
	return _c
}

func (_c *MockdataAccessRepository_UpdateAccessPoint_Call) Return(_a0 error) *MockdataAccessRepository_UpdateAccessPoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_UpdateAccessPoint_Call) RunAndReturn(run func(context.Context, string, string, []*awspolicy.Statement) error) *MockdataAccessRepository_UpdateAccessPoint_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssumeEntities provides a mock function with given fields: ctx, roleName, userNames
func (_m *MockdataAccessRepository) UpdateAssumeEntities(ctx context.Context, roleName string, userNames []string) error {
	ret := _m.Called(ctx, roleName, userNames)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssumeEntities")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, roleName, userNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_UpdateAssumeEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssumeEntities'
type MockdataAccessRepository_UpdateAssumeEntities_Call struct {
	*mock.Call
}

// UpdateAssumeEntities is a helper method to define mock.On call
//   - ctx context.Context
//   - roleName string
//   - userNames []string
func (_e *MockdataAccessRepository_Expecter) UpdateAssumeEntities(ctx interface{}, roleName interface{}, userNames interface{}) *MockdataAccessRepository_UpdateAssumeEntities_Call {
	return &MockdataAccessRepository_UpdateAssumeEntities_Call{Call: _e.mock.On("UpdateAssumeEntities", ctx, roleName, userNames)}
}

func (_c *MockdataAccessRepository_UpdateAssumeEntities_Call) Run(run func(ctx context.Context, roleName string, userNames []string)) *MockdataAccessRepository_UpdateAssumeEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockdataAccessRepository_UpdateAssumeEntities_Call) Return(_a0 error) *MockdataAccessRepository_UpdateAssumeEntities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_UpdateAssumeEntities_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockdataAccessRepository_UpdateAssumeEntities_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInlinePolicy provides a mock function with given fields: ctx, policyName, resourceName, resourceType, statements
func (_m *MockdataAccessRepository) UpdateInlinePolicy(ctx context.Context, policyName string, resourceName string, resourceType string, statements []*awspolicy.Statement) error {
	ret := _m.Called(ctx, policyName, resourceName, resourceType, statements)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInlinePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*awspolicy.Statement) error); ok {
		r0 = rf(ctx, policyName, resourceName, resourceType, statements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_UpdateInlinePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInlinePolicy'
type MockdataAccessRepository_UpdateInlinePolicy_Call struct {
	*mock.Call
}

// UpdateInlinePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyName string
//   - resourceName string
//   - resourceType string
//   - statements []*awspolicy.Statement
func (_e *MockdataAccessRepository_Expecter) UpdateInlinePolicy(ctx interface{}, policyName interface{}, resourceName interface{}, resourceType interface{}, statements interface{}) *MockdataAccessRepository_UpdateInlinePolicy_Call {
	return &MockdataAccessRepository_UpdateInlinePolicy_Call{Call: _e.mock.On("UpdateInlinePolicy", ctx, policyName, resourceName, resourceType, statements)}
}

func (_c *MockdataAccessRepository_UpdateInlinePolicy_Call) Run(run func(ctx context.Context, policyName string, resourceName string, resourceType string, statements []*awspolicy.Statement)) *MockdataAccessRepository_UpdateInlinePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]*awspolicy.Statement))
	})
	return _c
}

func (_c *MockdataAccessRepository_UpdateInlinePolicy_Call) Return(_a0 error) *MockdataAccessRepository_UpdateInlinePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_UpdateInlinePolicy_Call) RunAndReturn(run func(context.Context, string, string, string, []*awspolicy.Statement) error) *MockdataAccessRepository_UpdateInlinePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateManagedPolicy provides a mock function with given fields: ctx, policyName, awsManaged, statements
func (_m *MockdataAccessRepository) UpdateManagedPolicy(ctx context.Context, policyName string, awsManaged bool, statements []*awspolicy.Statement) error {
	ret := _m.Called(ctx, policyName, awsManaged, statements)

	if len(ret) == 0 {
		panic("no return value specified for UpdateManagedPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, []*awspolicy.Statement) error); ok {
		r0 = rf(ctx, policyName, awsManaged, statements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessRepository_UpdateManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateManagedPolicy'
type MockdataAccessRepository_UpdateManagedPolicy_Call struct {
	*mock.Call
}

// UpdateManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyName string
//   - awsManaged bool
//   - statements []*awspolicy.Statement
func (_e *MockdataAccessRepository_Expecter) UpdateManagedPolicy(ctx interface{}, policyName interface{}, awsManaged interface{}, statements interface{}) *MockdataAccessRepository_UpdateManagedPolicy_Call {
	return &MockdataAccessRepository_UpdateManagedPolicy_Call{Call: _e.mock.On("UpdateManagedPolicy", ctx, policyName, awsManaged, statements)}
}

func (_c *MockdataAccessRepository_UpdateManagedPolicy_Call) Run(run func(ctx context.Context, policyName string, awsManaged bool, statements []*awspolicy.Statement)) *MockdataAccessRepository_UpdateManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].([]*awspolicy.Statement))
	})
	return _c
}

func (_c *MockdataAccessRepository_UpdateManagedPolicy_Call) Return(_a0 error) *MockdataAccessRepository_UpdateManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessRepository_UpdateManagedPolicy_Call) RunAndReturn(run func(context.Context, string, bool, []*awspolicy.Statement) error) *MockdataAccessRepository_UpdateManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdataAccessRepository creates a new instance of MockdataAccessRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdataAccessRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdataAccessRepository {
	mock := &MockdataAccessRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
