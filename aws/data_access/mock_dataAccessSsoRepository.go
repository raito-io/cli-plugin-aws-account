// Code generated by mockery v2.43.0. DO NOT EDIT.

package data_access

import (
	context "context"

	awspolicy "github.com/n4ch04/aws-policy"
	bimap "github.com/raito-io/cli-plugin-aws-account/aws/utils/bimap"

	mock "github.com/stretchr/testify/mock"

	set "github.com/raito-io/golang-set/set"

	types "github.com/aws/aws-sdk-go-v2/service/ssoadmin/types"
)

// MockdataAccessSsoRepository is an autogenerated mock type for the dataAccessSsoRepository type
type MockdataAccessSsoRepository struct {
	mock.Mock
}

type MockdataAccessSsoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdataAccessSsoRepository) EXPECT() *MockdataAccessSsoRepository_Expecter {
	return &MockdataAccessSsoRepository_Expecter{mock: &_m.Mock}
}

// AssignPermissionSet provides a mock function with given fields: ctx, permissionSetArn, principalType, principal
func (_m *MockdataAccessSsoRepository) AssignPermissionSet(ctx context.Context, permissionSetArn string, principalType types.PrincipalType, principal string) error {
	ret := _m.Called(ctx, permissionSetArn, principalType, principal)

	if len(ret) == 0 {
		panic("no return value specified for AssignPermissionSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PrincipalType, string) error); ok {
		r0 = rf(ctx, permissionSetArn, principalType, principal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessSsoRepository_AssignPermissionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignPermissionSet'
type MockdataAccessSsoRepository_AssignPermissionSet_Call struct {
	*mock.Call
}

// AssignPermissionSet is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
//   - principalType types.PrincipalType
//   - principal string
func (_e *MockdataAccessSsoRepository_Expecter) AssignPermissionSet(ctx interface{}, permissionSetArn interface{}, principalType interface{}, principal interface{}) *MockdataAccessSsoRepository_AssignPermissionSet_Call {
	return &MockdataAccessSsoRepository_AssignPermissionSet_Call{Call: _e.mock.On("AssignPermissionSet", ctx, permissionSetArn, principalType, principal)}
}

func (_c *MockdataAccessSsoRepository_AssignPermissionSet_Call) Run(run func(ctx context.Context, permissionSetArn string, principalType types.PrincipalType, principal string)) *MockdataAccessSsoRepository_AssignPermissionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.PrincipalType), args[3].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_AssignPermissionSet_Call) Return(_a0 error) *MockdataAccessSsoRepository_AssignPermissionSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessSsoRepository_AssignPermissionSet_Call) RunAndReturn(run func(context.Context, string, types.PrincipalType, string) error) *MockdataAccessSsoRepository_AssignPermissionSet_Call {
	_c.Call.Return(run)
	return _c
}

// AttachAwsManagedPolicyToPermissionSet provides a mock function with given fields: ctx, permissionSetArn, policyArn
func (_m *MockdataAccessSsoRepository) AttachAwsManagedPolicyToPermissionSet(ctx context.Context, permissionSetArn string, policyArn string) error {
	ret := _m.Called(ctx, permissionSetArn, policyArn)

	if len(ret) == 0 {
		panic("no return value specified for AttachAwsManagedPolicyToPermissionSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, permissionSetArn, policyArn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessSsoRepository_AttachAwsManagedPolicyToPermissionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachAwsManagedPolicyToPermissionSet'
type MockdataAccessSsoRepository_AttachAwsManagedPolicyToPermissionSet_Call struct {
	*mock.Call
}

// AttachAwsManagedPolicyToPermissionSet is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
//   - policyArn string
func (_e *MockdataAccessSsoRepository_Expecter) AttachAwsManagedPolicyToPermissionSet(ctx interface{}, permissionSetArn interface{}, policyArn interface{}) *MockdataAccessSsoRepository_AttachAwsManagedPolicyToPermissionSet_Call {
	return &MockdataAccessSsoRepository_AttachAwsManagedPolicyToPermissionSet_Call{Call: _e.mock.On("AttachAwsManagedPolicyToPermissionSet", ctx, permissionSetArn, policyArn)}
}

func (_c *MockdataAccessSsoRepository_AttachAwsManagedPolicyToPermissionSet_Call) Run(run func(ctx context.Context, permissionSetArn string, policyArn string)) *MockdataAccessSsoRepository_AttachAwsManagedPolicyToPermissionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_AttachAwsManagedPolicyToPermissionSet_Call) Return(_a0 error) *MockdataAccessSsoRepository_AttachAwsManagedPolicyToPermissionSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessSsoRepository_AttachAwsManagedPolicyToPermissionSet_Call) RunAndReturn(run func(context.Context, string, string) error) *MockdataAccessSsoRepository_AttachAwsManagedPolicyToPermissionSet_Call {
	_c.Call.Return(run)
	return _c
}

// AttachCustomerManagedPolicyToPermissionSet provides a mock function with given fields: ctx, permissionSetArn, name, path
func (_m *MockdataAccessSsoRepository) AttachCustomerManagedPolicyToPermissionSet(ctx context.Context, permissionSetArn string, name string, path *string) error {
	ret := _m.Called(ctx, permissionSetArn, name, path)

	if len(ret) == 0 {
		panic("no return value specified for AttachCustomerManagedPolicyToPermissionSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string) error); ok {
		r0 = rf(ctx, permissionSetArn, name, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessSsoRepository_AttachCustomerManagedPolicyToPermissionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachCustomerManagedPolicyToPermissionSet'
type MockdataAccessSsoRepository_AttachCustomerManagedPolicyToPermissionSet_Call struct {
	*mock.Call
}

// AttachCustomerManagedPolicyToPermissionSet is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
//   - name string
//   - path *string
func (_e *MockdataAccessSsoRepository_Expecter) AttachCustomerManagedPolicyToPermissionSet(ctx interface{}, permissionSetArn interface{}, name interface{}, path interface{}) *MockdataAccessSsoRepository_AttachCustomerManagedPolicyToPermissionSet_Call {
	return &MockdataAccessSsoRepository_AttachCustomerManagedPolicyToPermissionSet_Call{Call: _e.mock.On("AttachCustomerManagedPolicyToPermissionSet", ctx, permissionSetArn, name, path)}
}

func (_c *MockdataAccessSsoRepository_AttachCustomerManagedPolicyToPermissionSet_Call) Run(run func(ctx context.Context, permissionSetArn string, name string, path *string)) *MockdataAccessSsoRepository_AttachCustomerManagedPolicyToPermissionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_AttachCustomerManagedPolicyToPermissionSet_Call) Return(_a0 error) *MockdataAccessSsoRepository_AttachCustomerManagedPolicyToPermissionSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessSsoRepository_AttachCustomerManagedPolicyToPermissionSet_Call) RunAndReturn(run func(context.Context, string, string, *string) error) *MockdataAccessSsoRepository_AttachCustomerManagedPolicyToPermissionSet_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSsoRole provides a mock function with given fields: ctx, name, description
func (_m *MockdataAccessSsoRepository) CreateSsoRole(ctx context.Context, name string, description string) (string, error) {
	ret := _m.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateSsoRole")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, name, description)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessSsoRepository_CreateSsoRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSsoRole'
type MockdataAccessSsoRepository_CreateSsoRole_Call struct {
	*mock.Call
}

// CreateSsoRole is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
func (_e *MockdataAccessSsoRepository_Expecter) CreateSsoRole(ctx interface{}, name interface{}, description interface{}) *MockdataAccessSsoRepository_CreateSsoRole_Call {
	return &MockdataAccessSsoRepository_CreateSsoRole_Call{Call: _e.mock.On("CreateSsoRole", ctx, name, description)}
}

func (_c *MockdataAccessSsoRepository_CreateSsoRole_Call) Run(run func(ctx context.Context, name string, description string)) *MockdataAccessSsoRepository_CreateSsoRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_CreateSsoRole_Call) Return(arn string, err error) *MockdataAccessSsoRepository_CreateSsoRole_Call {
	_c.Call.Return(arn, err)
	return _c
}

func (_c *MockdataAccessSsoRepository_CreateSsoRole_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *MockdataAccessSsoRepository_CreateSsoRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSsoRole provides a mock function with given fields: ctx, permissionSetArn
func (_m *MockdataAccessSsoRepository) DeleteSsoRole(ctx context.Context, permissionSetArn string) error {
	ret := _m.Called(ctx, permissionSetArn)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSsoRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, permissionSetArn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessSsoRepository_DeleteSsoRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSsoRole'
type MockdataAccessSsoRepository_DeleteSsoRole_Call struct {
	*mock.Call
}

// DeleteSsoRole is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
func (_e *MockdataAccessSsoRepository_Expecter) DeleteSsoRole(ctx interface{}, permissionSetArn interface{}) *MockdataAccessSsoRepository_DeleteSsoRole_Call {
	return &MockdataAccessSsoRepository_DeleteSsoRole_Call{Call: _e.mock.On("DeleteSsoRole", ctx, permissionSetArn)}
}

func (_c *MockdataAccessSsoRepository_DeleteSsoRole_Call) Run(run func(ctx context.Context, permissionSetArn string)) *MockdataAccessSsoRepository_DeleteSsoRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_DeleteSsoRole_Call) Return(_a0 error) *MockdataAccessSsoRepository_DeleteSsoRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessSsoRepository_DeleteSsoRole_Call) RunAndReturn(run func(context.Context, string) error) *MockdataAccessSsoRepository_DeleteSsoRole_Call {
	_c.Call.Return(run)
	return _c
}

// DetachAwsManagedPolicyFromPermissionSet provides a mock function with given fields: ctx, permissionSetArn, policyArn
func (_m *MockdataAccessSsoRepository) DetachAwsManagedPolicyFromPermissionSet(ctx context.Context, permissionSetArn string, policyArn string) error {
	ret := _m.Called(ctx, permissionSetArn, policyArn)

	if len(ret) == 0 {
		panic("no return value specified for DetachAwsManagedPolicyFromPermissionSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, permissionSetArn, policyArn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessSsoRepository_DetachAwsManagedPolicyFromPermissionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachAwsManagedPolicyFromPermissionSet'
type MockdataAccessSsoRepository_DetachAwsManagedPolicyFromPermissionSet_Call struct {
	*mock.Call
}

// DetachAwsManagedPolicyFromPermissionSet is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
//   - policyArn string
func (_e *MockdataAccessSsoRepository_Expecter) DetachAwsManagedPolicyFromPermissionSet(ctx interface{}, permissionSetArn interface{}, policyArn interface{}) *MockdataAccessSsoRepository_DetachAwsManagedPolicyFromPermissionSet_Call {
	return &MockdataAccessSsoRepository_DetachAwsManagedPolicyFromPermissionSet_Call{Call: _e.mock.On("DetachAwsManagedPolicyFromPermissionSet", ctx, permissionSetArn, policyArn)}
}

func (_c *MockdataAccessSsoRepository_DetachAwsManagedPolicyFromPermissionSet_Call) Run(run func(ctx context.Context, permissionSetArn string, policyArn string)) *MockdataAccessSsoRepository_DetachAwsManagedPolicyFromPermissionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_DetachAwsManagedPolicyFromPermissionSet_Call) Return(_a0 error) *MockdataAccessSsoRepository_DetachAwsManagedPolicyFromPermissionSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessSsoRepository_DetachAwsManagedPolicyFromPermissionSet_Call) RunAndReturn(run func(context.Context, string, string) error) *MockdataAccessSsoRepository_DetachAwsManagedPolicyFromPermissionSet_Call {
	_c.Call.Return(run)
	return _c
}

// DetachCustomerManagedPolicyFromPermissionSet provides a mock function with given fields: ctx, permissionSetArn, name, path
func (_m *MockdataAccessSsoRepository) DetachCustomerManagedPolicyFromPermissionSet(ctx context.Context, permissionSetArn string, name string, path *string) error {
	ret := _m.Called(ctx, permissionSetArn, name, path)

	if len(ret) == 0 {
		panic("no return value specified for DetachCustomerManagedPolicyFromPermissionSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string) error); ok {
		r0 = rf(ctx, permissionSetArn, name, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessSsoRepository_DetachCustomerManagedPolicyFromPermissionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachCustomerManagedPolicyFromPermissionSet'
type MockdataAccessSsoRepository_DetachCustomerManagedPolicyFromPermissionSet_Call struct {
	*mock.Call
}

// DetachCustomerManagedPolicyFromPermissionSet is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
//   - name string
//   - path *string
func (_e *MockdataAccessSsoRepository_Expecter) DetachCustomerManagedPolicyFromPermissionSet(ctx interface{}, permissionSetArn interface{}, name interface{}, path interface{}) *MockdataAccessSsoRepository_DetachCustomerManagedPolicyFromPermissionSet_Call {
	return &MockdataAccessSsoRepository_DetachCustomerManagedPolicyFromPermissionSet_Call{Call: _e.mock.On("DetachCustomerManagedPolicyFromPermissionSet", ctx, permissionSetArn, name, path)}
}

func (_c *MockdataAccessSsoRepository_DetachCustomerManagedPolicyFromPermissionSet_Call) Run(run func(ctx context.Context, permissionSetArn string, name string, path *string)) *MockdataAccessSsoRepository_DetachCustomerManagedPolicyFromPermissionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_DetachCustomerManagedPolicyFromPermissionSet_Call) Return(_a0 error) *MockdataAccessSsoRepository_DetachCustomerManagedPolicyFromPermissionSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessSsoRepository_DetachCustomerManagedPolicyFromPermissionSet_Call) RunAndReturn(run func(context.Context, string, string, *string) error) *MockdataAccessSsoRepository_DetachCustomerManagedPolicyFromPermissionSet_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields: ctx
func (_m *MockdataAccessSsoRepository) GetGroups(ctx context.Context) (bimap.Bimap[string, string], error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 bimap.Bimap[string, string]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bimap.Bimap[string, string], error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bimap.Bimap[string, string]); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bimap.Bimap[string, string])
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessSsoRepository_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MockdataAccessSsoRepository_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockdataAccessSsoRepository_Expecter) GetGroups(ctx interface{}) *MockdataAccessSsoRepository_GetGroups_Call {
	return &MockdataAccessSsoRepository_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx)}
}

func (_c *MockdataAccessSsoRepository_GetGroups_Call) Run(run func(ctx context.Context)) *MockdataAccessSsoRepository_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_GetGroups_Call) Return(_a0 bimap.Bimap[string, string], _a1 error) *MockdataAccessSsoRepository_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessSsoRepository_GetGroups_Call) RunAndReturn(run func(context.Context) (bimap.Bimap[string, string], error)) *MockdataAccessSsoRepository_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetSsoRole provides a mock function with given fields: ctx, permissionSetArn
func (_m *MockdataAccessSsoRepository) GetSsoRole(ctx context.Context, permissionSetArn string) (*types.PermissionSet, error) {
	ret := _m.Called(ctx, permissionSetArn)

	if len(ret) == 0 {
		panic("no return value specified for GetSsoRole")
	}

	var r0 *types.PermissionSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.PermissionSet, error)); ok {
		return rf(ctx, permissionSetArn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.PermissionSet); ok {
		r0 = rf(ctx, permissionSetArn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PermissionSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, permissionSetArn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessSsoRepository_GetSsoRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSsoRole'
type MockdataAccessSsoRepository_GetSsoRole_Call struct {
	*mock.Call
}

// GetSsoRole is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
func (_e *MockdataAccessSsoRepository_Expecter) GetSsoRole(ctx interface{}, permissionSetArn interface{}) *MockdataAccessSsoRepository_GetSsoRole_Call {
	return &MockdataAccessSsoRepository_GetSsoRole_Call{Call: _e.mock.On("GetSsoRole", ctx, permissionSetArn)}
}

func (_c *MockdataAccessSsoRepository_GetSsoRole_Call) Run(run func(ctx context.Context, permissionSetArn string)) *MockdataAccessSsoRepository_GetSsoRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_GetSsoRole_Call) Return(_a0 *types.PermissionSet, _a1 error) *MockdataAccessSsoRepository_GetSsoRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessSsoRepository_GetSsoRole_Call) RunAndReturn(run func(context.Context, string) (*types.PermissionSet, error)) *MockdataAccessSsoRepository_GetSsoRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx
func (_m *MockdataAccessSsoRepository) GetUsers(ctx context.Context) (bimap.Bimap[string, string], error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 bimap.Bimap[string, string]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bimap.Bimap[string, string], error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bimap.Bimap[string, string]); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bimap.Bimap[string, string])
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessSsoRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockdataAccessSsoRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockdataAccessSsoRepository_Expecter) GetUsers(ctx interface{}) *MockdataAccessSsoRepository_GetUsers_Call {
	return &MockdataAccessSsoRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx)}
}

func (_c *MockdataAccessSsoRepository_GetUsers_Call) Run(run func(ctx context.Context)) *MockdataAccessSsoRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_GetUsers_Call) Return(_a0 bimap.Bimap[string, string], _a1 error) *MockdataAccessSsoRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessSsoRepository_GetUsers_Call) RunAndReturn(run func(context.Context) (bimap.Bimap[string, string], error)) *MockdataAccessSsoRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListAwsManagedPolicyFromPermissionSet provides a mock function with given fields: ctx, permissionSetArn
func (_m *MockdataAccessSsoRepository) ListAwsManagedPolicyFromPermissionSet(ctx context.Context, permissionSetArn string) (set.Set[string], error) {
	ret := _m.Called(ctx, permissionSetArn)

	if len(ret) == 0 {
		panic("no return value specified for ListAwsManagedPolicyFromPermissionSet")
	}

	var r0 set.Set[string]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (set.Set[string], error)); ok {
		return rf(ctx, permissionSetArn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) set.Set[string]); ok {
		r0 = rf(ctx, permissionSetArn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(set.Set[string])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, permissionSetArn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessSsoRepository_ListAwsManagedPolicyFromPermissionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAwsManagedPolicyFromPermissionSet'
type MockdataAccessSsoRepository_ListAwsManagedPolicyFromPermissionSet_Call struct {
	*mock.Call
}

// ListAwsManagedPolicyFromPermissionSet is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
func (_e *MockdataAccessSsoRepository_Expecter) ListAwsManagedPolicyFromPermissionSet(ctx interface{}, permissionSetArn interface{}) *MockdataAccessSsoRepository_ListAwsManagedPolicyFromPermissionSet_Call {
	return &MockdataAccessSsoRepository_ListAwsManagedPolicyFromPermissionSet_Call{Call: _e.mock.On("ListAwsManagedPolicyFromPermissionSet", ctx, permissionSetArn)}
}

func (_c *MockdataAccessSsoRepository_ListAwsManagedPolicyFromPermissionSet_Call) Run(run func(ctx context.Context, permissionSetArn string)) *MockdataAccessSsoRepository_ListAwsManagedPolicyFromPermissionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_ListAwsManagedPolicyFromPermissionSet_Call) Return(_a0 set.Set[string], _a1 error) *MockdataAccessSsoRepository_ListAwsManagedPolicyFromPermissionSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessSsoRepository_ListAwsManagedPolicyFromPermissionSet_Call) RunAndReturn(run func(context.Context, string) (set.Set[string], error)) *MockdataAccessSsoRepository_ListAwsManagedPolicyFromPermissionSet_Call {
	_c.Call.Return(run)
	return _c
}

// ListCustomerManagedPolicyFromPermissionSet provides a mock function with given fields: ctx, permissionSetArn
func (_m *MockdataAccessSsoRepository) ListCustomerManagedPolicyFromPermissionSet(ctx context.Context, permissionSetArn string) (set.Set[string], error) {
	ret := _m.Called(ctx, permissionSetArn)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomerManagedPolicyFromPermissionSet")
	}

	var r0 set.Set[string]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (set.Set[string], error)); ok {
		return rf(ctx, permissionSetArn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) set.Set[string]); ok {
		r0 = rf(ctx, permissionSetArn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(set.Set[string])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, permissionSetArn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessSsoRepository_ListCustomerManagedPolicyFromPermissionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCustomerManagedPolicyFromPermissionSet'
type MockdataAccessSsoRepository_ListCustomerManagedPolicyFromPermissionSet_Call struct {
	*mock.Call
}

// ListCustomerManagedPolicyFromPermissionSet is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
func (_e *MockdataAccessSsoRepository_Expecter) ListCustomerManagedPolicyFromPermissionSet(ctx interface{}, permissionSetArn interface{}) *MockdataAccessSsoRepository_ListCustomerManagedPolicyFromPermissionSet_Call {
	return &MockdataAccessSsoRepository_ListCustomerManagedPolicyFromPermissionSet_Call{Call: _e.mock.On("ListCustomerManagedPolicyFromPermissionSet", ctx, permissionSetArn)}
}

func (_c *MockdataAccessSsoRepository_ListCustomerManagedPolicyFromPermissionSet_Call) Run(run func(ctx context.Context, permissionSetArn string)) *MockdataAccessSsoRepository_ListCustomerManagedPolicyFromPermissionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_ListCustomerManagedPolicyFromPermissionSet_Call) Return(_a0 set.Set[string], _a1 error) *MockdataAccessSsoRepository_ListCustomerManagedPolicyFromPermissionSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessSsoRepository_ListCustomerManagedPolicyFromPermissionSet_Call) RunAndReturn(run func(context.Context, string) (set.Set[string], error)) *MockdataAccessSsoRepository_ListCustomerManagedPolicyFromPermissionSet_Call {
	_c.Call.Return(run)
	return _c
}

// ListPermissionSetAssignment provides a mock function with given fields: ctx, permissionSetArn
func (_m *MockdataAccessSsoRepository) ListPermissionSetAssignment(ctx context.Context, permissionSetArn string) ([]types.AccountAssignment, error) {
	ret := _m.Called(ctx, permissionSetArn)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissionSetAssignment")
	}

	var r0 []types.AccountAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]types.AccountAssignment, error)); ok {
		return rf(ctx, permissionSetArn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []types.AccountAssignment); ok {
		r0 = rf(ctx, permissionSetArn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.AccountAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, permissionSetArn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessSsoRepository_ListPermissionSetAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPermissionSetAssignment'
type MockdataAccessSsoRepository_ListPermissionSetAssignment_Call struct {
	*mock.Call
}

// ListPermissionSetAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
func (_e *MockdataAccessSsoRepository_Expecter) ListPermissionSetAssignment(ctx interface{}, permissionSetArn interface{}) *MockdataAccessSsoRepository_ListPermissionSetAssignment_Call {
	return &MockdataAccessSsoRepository_ListPermissionSetAssignment_Call{Call: _e.mock.On("ListPermissionSetAssignment", ctx, permissionSetArn)}
}

func (_c *MockdataAccessSsoRepository_ListPermissionSetAssignment_Call) Run(run func(ctx context.Context, permissionSetArn string)) *MockdataAccessSsoRepository_ListPermissionSetAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_ListPermissionSetAssignment_Call) Return(_a0 []types.AccountAssignment, _a1 error) *MockdataAccessSsoRepository_ListPermissionSetAssignment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessSsoRepository_ListPermissionSetAssignment_Call) RunAndReturn(run func(context.Context, string) ([]types.AccountAssignment, error)) *MockdataAccessSsoRepository_ListPermissionSetAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// ListSsoRole provides a mock function with given fields: ctx
func (_m *MockdataAccessSsoRepository) ListSsoRole(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSsoRole")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessSsoRepository_ListSsoRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSsoRole'
type MockdataAccessSsoRepository_ListSsoRole_Call struct {
	*mock.Call
}

// ListSsoRole is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockdataAccessSsoRepository_Expecter) ListSsoRole(ctx interface{}) *MockdataAccessSsoRepository_ListSsoRole_Call {
	return &MockdataAccessSsoRepository_ListSsoRole_Call{Call: _e.mock.On("ListSsoRole", ctx)}
}

func (_c *MockdataAccessSsoRepository_ListSsoRole_Call) Run(run func(ctx context.Context)) *MockdataAccessSsoRepository_ListSsoRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_ListSsoRole_Call) Return(_a0 []string, _a1 error) *MockdataAccessSsoRepository_ListSsoRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessSsoRepository_ListSsoRole_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockdataAccessSsoRepository_ListSsoRole_Call {
	_c.Call.Return(run)
	return _c
}

// ProvisionPermissionSet provides a mock function with given fields: ctx, permissionSetArn
func (_m *MockdataAccessSsoRepository) ProvisionPermissionSet(ctx context.Context, permissionSetArn string) (*types.PermissionSetProvisioningStatus, error) {
	ret := _m.Called(ctx, permissionSetArn)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionPermissionSet")
	}

	var r0 *types.PermissionSetProvisioningStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.PermissionSetProvisioningStatus, error)); ok {
		return rf(ctx, permissionSetArn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.PermissionSetProvisioningStatus); ok {
		r0 = rf(ctx, permissionSetArn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PermissionSetProvisioningStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, permissionSetArn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdataAccessSsoRepository_ProvisionPermissionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvisionPermissionSet'
type MockdataAccessSsoRepository_ProvisionPermissionSet_Call struct {
	*mock.Call
}

// ProvisionPermissionSet is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
func (_e *MockdataAccessSsoRepository_Expecter) ProvisionPermissionSet(ctx interface{}, permissionSetArn interface{}) *MockdataAccessSsoRepository_ProvisionPermissionSet_Call {
	return &MockdataAccessSsoRepository_ProvisionPermissionSet_Call{Call: _e.mock.On("ProvisionPermissionSet", ctx, permissionSetArn)}
}

func (_c *MockdataAccessSsoRepository_ProvisionPermissionSet_Call) Run(run func(ctx context.Context, permissionSetArn string)) *MockdataAccessSsoRepository_ProvisionPermissionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_ProvisionPermissionSet_Call) Return(_a0 *types.PermissionSetProvisioningStatus, _a1 error) *MockdataAccessSsoRepository_ProvisionPermissionSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdataAccessSsoRepository_ProvisionPermissionSet_Call) RunAndReturn(run func(context.Context, string) (*types.PermissionSetProvisioningStatus, error)) *MockdataAccessSsoRepository_ProvisionPermissionSet_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignPermissionSet provides a mock function with given fields: ctx, permissionSetArn, principalType, principal
func (_m *MockdataAccessSsoRepository) UnassignPermissionSet(ctx context.Context, permissionSetArn string, principalType types.PrincipalType, principal string) error {
	ret := _m.Called(ctx, permissionSetArn, principalType, principal)

	if len(ret) == 0 {
		panic("no return value specified for UnassignPermissionSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PrincipalType, string) error); ok {
		r0 = rf(ctx, permissionSetArn, principalType, principal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessSsoRepository_UnassignPermissionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignPermissionSet'
type MockdataAccessSsoRepository_UnassignPermissionSet_Call struct {
	*mock.Call
}

// UnassignPermissionSet is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
//   - principalType types.PrincipalType
//   - principal string
func (_e *MockdataAccessSsoRepository_Expecter) UnassignPermissionSet(ctx interface{}, permissionSetArn interface{}, principalType interface{}, principal interface{}) *MockdataAccessSsoRepository_UnassignPermissionSet_Call {
	return &MockdataAccessSsoRepository_UnassignPermissionSet_Call{Call: _e.mock.On("UnassignPermissionSet", ctx, permissionSetArn, principalType, principal)}
}

func (_c *MockdataAccessSsoRepository_UnassignPermissionSet_Call) Run(run func(ctx context.Context, permissionSetArn string, principalType types.PrincipalType, principal string)) *MockdataAccessSsoRepository_UnassignPermissionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.PrincipalType), args[3].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_UnassignPermissionSet_Call) Return(_a0 error) *MockdataAccessSsoRepository_UnassignPermissionSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessSsoRepository_UnassignPermissionSet_Call) RunAndReturn(run func(context.Context, string, types.PrincipalType, string) error) *MockdataAccessSsoRepository_UnassignPermissionSet_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInlinePolicyToPermissionSet provides a mock function with given fields: ctx, permissionSetArn, statements
func (_m *MockdataAccessSsoRepository) UpdateInlinePolicyToPermissionSet(ctx context.Context, permissionSetArn string, statements []*awspolicy.Statement) error {
	ret := _m.Called(ctx, permissionSetArn, statements)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInlinePolicyToPermissionSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*awspolicy.Statement) error); ok {
		r0 = rf(ctx, permissionSetArn, statements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessSsoRepository_UpdateInlinePolicyToPermissionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInlinePolicyToPermissionSet'
type MockdataAccessSsoRepository_UpdateInlinePolicyToPermissionSet_Call struct {
	*mock.Call
}

// UpdateInlinePolicyToPermissionSet is a helper method to define mock.On call
//   - ctx context.Context
//   - permissionSetArn string
//   - statements []*awspolicy.Statement
func (_e *MockdataAccessSsoRepository_Expecter) UpdateInlinePolicyToPermissionSet(ctx interface{}, permissionSetArn interface{}, statements interface{}) *MockdataAccessSsoRepository_UpdateInlinePolicyToPermissionSet_Call {
	return &MockdataAccessSsoRepository_UpdateInlinePolicyToPermissionSet_Call{Call: _e.mock.On("UpdateInlinePolicyToPermissionSet", ctx, permissionSetArn, statements)}
}

func (_c *MockdataAccessSsoRepository_UpdateInlinePolicyToPermissionSet_Call) Run(run func(ctx context.Context, permissionSetArn string, statements []*awspolicy.Statement)) *MockdataAccessSsoRepository_UpdateInlinePolicyToPermissionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]*awspolicy.Statement))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_UpdateInlinePolicyToPermissionSet_Call) Return(_a0 error) *MockdataAccessSsoRepository_UpdateInlinePolicyToPermissionSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessSsoRepository_UpdateInlinePolicyToPermissionSet_Call) RunAndReturn(run func(context.Context, string, []*awspolicy.Statement) error) *MockdataAccessSsoRepository_UpdateInlinePolicyToPermissionSet_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSsoRole provides a mock function with given fields: ctx, arn, description
func (_m *MockdataAccessSsoRepository) UpdateSsoRole(ctx context.Context, arn string, description string) error {
	ret := _m.Called(ctx, arn, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSsoRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, arn, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdataAccessSsoRepository_UpdateSsoRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSsoRole'
type MockdataAccessSsoRepository_UpdateSsoRole_Call struct {
	*mock.Call
}

// UpdateSsoRole is a helper method to define mock.On call
//   - ctx context.Context
//   - arn string
//   - description string
func (_e *MockdataAccessSsoRepository_Expecter) UpdateSsoRole(ctx interface{}, arn interface{}, description interface{}) *MockdataAccessSsoRepository_UpdateSsoRole_Call {
	return &MockdataAccessSsoRepository_UpdateSsoRole_Call{Call: _e.mock.On("UpdateSsoRole", ctx, arn, description)}
}

func (_c *MockdataAccessSsoRepository_UpdateSsoRole_Call) Run(run func(ctx context.Context, arn string, description string)) *MockdataAccessSsoRepository_UpdateSsoRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockdataAccessSsoRepository_UpdateSsoRole_Call) Return(_a0 error) *MockdataAccessSsoRepository_UpdateSsoRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdataAccessSsoRepository_UpdateSsoRole_Call) RunAndReturn(run func(context.Context, string, string) error) *MockdataAccessSsoRepository_UpdateSsoRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdataAccessSsoRepository creates a new instance of MockdataAccessSsoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdataAccessSsoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdataAccessSsoRepository {
	mock := &MockdataAccessSsoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
