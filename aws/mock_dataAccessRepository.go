// Code generated by mockery v2.27.1. DO NOT EDIT.

package aws

import (
	awspolicy "github.com/n4ch04/aws-policy"
	config "github.com/raito-io/cli/base/util/config"

	context "context"

	mock "github.com/stretchr/testify/mock"

	sync_to_target "github.com/raito-io/cli/base/access_provider/sync_to_target"

	types "github.com/aws/aws-sdk-go-v2/service/iam/types"
)

// mockDataAccessRepository is an autogenerated mock type for the dataAccessRepository type
type mockDataAccessRepository struct {
	mock.Mock
}

type mockDataAccessRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDataAccessRepository) EXPECT() *mockDataAccessRepository_Expecter {
	return &mockDataAccessRepository_Expecter{mock: &_m.Mock}
}

// AttachGroupToManagedPolicy provides a mock function with given fields: ctx, configMap, policyArn, groupNames
func (_m *mockDataAccessRepository) AttachGroupToManagedPolicy(ctx context.Context, configMap *config.ConfigMap, policyArn string, groupNames []string) error {
	ret := _m.Called(ctx, configMap, policyArn, groupNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, []string) error); ok {
		r0 = rf(ctx, configMap, policyArn, groupNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_AttachGroupToManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachGroupToManagedPolicy'
type mockDataAccessRepository_AttachGroupToManagedPolicy_Call struct {
	*mock.Call
}

// AttachGroupToManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyArn string
//   - groupNames []string
func (_e *mockDataAccessRepository_Expecter) AttachGroupToManagedPolicy(ctx interface{}, configMap interface{}, policyArn interface{}, groupNames interface{}) *mockDataAccessRepository_AttachGroupToManagedPolicy_Call {
	return &mockDataAccessRepository_AttachGroupToManagedPolicy_Call{Call: _e.mock.On("AttachGroupToManagedPolicy", ctx, configMap, policyArn, groupNames)}
}

func (_c *mockDataAccessRepository_AttachGroupToManagedPolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyArn string, groupNames []string)) *mockDataAccessRepository_AttachGroupToManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *mockDataAccessRepository_AttachGroupToManagedPolicy_Call) Return(_a0 error) *mockDataAccessRepository_AttachGroupToManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_AttachGroupToManagedPolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, []string) error) *mockDataAccessRepository_AttachGroupToManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AttachRoleToManagedPolicy provides a mock function with given fields: ctx, configMap, policyArn, roleNames
func (_m *mockDataAccessRepository) AttachRoleToManagedPolicy(ctx context.Context, configMap *config.ConfigMap, policyArn string, roleNames []string) error {
	ret := _m.Called(ctx, configMap, policyArn, roleNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, []string) error); ok {
		r0 = rf(ctx, configMap, policyArn, roleNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_AttachRoleToManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachRoleToManagedPolicy'
type mockDataAccessRepository_AttachRoleToManagedPolicy_Call struct {
	*mock.Call
}

// AttachRoleToManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyArn string
//   - roleNames []string
func (_e *mockDataAccessRepository_Expecter) AttachRoleToManagedPolicy(ctx interface{}, configMap interface{}, policyArn interface{}, roleNames interface{}) *mockDataAccessRepository_AttachRoleToManagedPolicy_Call {
	return &mockDataAccessRepository_AttachRoleToManagedPolicy_Call{Call: _e.mock.On("AttachRoleToManagedPolicy", ctx, configMap, policyArn, roleNames)}
}

func (_c *mockDataAccessRepository_AttachRoleToManagedPolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyArn string, roleNames []string)) *mockDataAccessRepository_AttachRoleToManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *mockDataAccessRepository_AttachRoleToManagedPolicy_Call) Return(_a0 error) *mockDataAccessRepository_AttachRoleToManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_AttachRoleToManagedPolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, []string) error) *mockDataAccessRepository_AttachRoleToManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AttachUserToManagedPolicy provides a mock function with given fields: ctx, configMap, policyArn, userNames
func (_m *mockDataAccessRepository) AttachUserToManagedPolicy(ctx context.Context, configMap *config.ConfigMap, policyArn string, userNames []string) error {
	ret := _m.Called(ctx, configMap, policyArn, userNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, []string) error); ok {
		r0 = rf(ctx, configMap, policyArn, userNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_AttachUserToManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachUserToManagedPolicy'
type mockDataAccessRepository_AttachUserToManagedPolicy_Call struct {
	*mock.Call
}

// AttachUserToManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyArn string
//   - userNames []string
func (_e *mockDataAccessRepository_Expecter) AttachUserToManagedPolicy(ctx interface{}, configMap interface{}, policyArn interface{}, userNames interface{}) *mockDataAccessRepository_AttachUserToManagedPolicy_Call {
	return &mockDataAccessRepository_AttachUserToManagedPolicy_Call{Call: _e.mock.On("AttachUserToManagedPolicy", ctx, configMap, policyArn, userNames)}
}

func (_c *mockDataAccessRepository_AttachUserToManagedPolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyArn string, userNames []string)) *mockDataAccessRepository_AttachUserToManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *mockDataAccessRepository_AttachUserToManagedPolicy_Call) Return(_a0 error) *mockDataAccessRepository_AttachUserToManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_AttachUserToManagedPolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, []string) error) *mockDataAccessRepository_AttachUserToManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManagedPolicy provides a mock function with given fields: ctx, configMap, policyName, statements
func (_m *mockDataAccessRepository) CreateManagedPolicy(ctx context.Context, configMap *config.ConfigMap, policyName string, statements []awspolicy.Statement) (*types.Policy, error) {
	ret := _m.Called(ctx, configMap, policyName, statements)

	var r0 *types.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, []awspolicy.Statement) (*types.Policy, error)); ok {
		return rf(ctx, configMap, policyName, statements)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, []awspolicy.Statement) *types.Policy); ok {
		r0 = rf(ctx, configMap, policyName, statements)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, string, []awspolicy.Statement) error); ok {
		r1 = rf(ctx, configMap, policyName, statements)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_CreateManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManagedPolicy'
type mockDataAccessRepository_CreateManagedPolicy_Call struct {
	*mock.Call
}

// CreateManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyName string
//   - statements []awspolicy.Statement
func (_e *mockDataAccessRepository_Expecter) CreateManagedPolicy(ctx interface{}, configMap interface{}, policyName interface{}, statements interface{}) *mockDataAccessRepository_CreateManagedPolicy_Call {
	return &mockDataAccessRepository_CreateManagedPolicy_Call{Call: _e.mock.On("CreateManagedPolicy", ctx, configMap, policyName, statements)}
}

func (_c *mockDataAccessRepository_CreateManagedPolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyName string, statements []awspolicy.Statement)) *mockDataAccessRepository_CreateManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].([]awspolicy.Statement))
	})
	return _c
}

func (_c *mockDataAccessRepository_CreateManagedPolicy_Call) Return(_a0 *types.Policy, _a1 error) *mockDataAccessRepository_CreateManagedPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_CreateManagedPolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, []awspolicy.Statement) (*types.Policy, error)) *mockDataAccessRepository_CreateManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: ctx, configMap, name, description, userNames
func (_m *mockDataAccessRepository) CreateRole(ctx context.Context, configMap *config.ConfigMap, name string, description string, userNames []string) error {
	ret := _m.Called(ctx, configMap, name, description, userNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, string, []string) error); ok {
		r0 = rf(ctx, configMap, name, description, userNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type mockDataAccessRepository_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - name string
//   - description string
//   - userNames []string
func (_e *mockDataAccessRepository_Expecter) CreateRole(ctx interface{}, configMap interface{}, name interface{}, description interface{}, userNames interface{}) *mockDataAccessRepository_CreateRole_Call {
	return &mockDataAccessRepository_CreateRole_Call{Call: _e.mock.On("CreateRole", ctx, configMap, name, description, userNames)}
}

func (_c *mockDataAccessRepository_CreateRole_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, name string, description string, userNames []string)) *mockDataAccessRepository_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *mockDataAccessRepository_CreateRole_Call) Return(_a0 error) *mockDataAccessRepository_CreateRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_CreateRole_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, string, []string) error) *mockDataAccessRepository_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInlinePolicy provides a mock function with given fields: ctx, configMap, policyName, resourceName, resourceType
func (_m *mockDataAccessRepository) DeleteInlinePolicy(ctx context.Context, configMap *config.ConfigMap, policyName string, resourceName string, resourceType string) error {
	ret := _m.Called(ctx, configMap, policyName, resourceName, resourceType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, string, string) error); ok {
		r0 = rf(ctx, configMap, policyName, resourceName, resourceType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DeleteInlinePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInlinePolicy'
type mockDataAccessRepository_DeleteInlinePolicy_Call struct {
	*mock.Call
}

// DeleteInlinePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyName string
//   - resourceName string
//   - resourceType string
func (_e *mockDataAccessRepository_Expecter) DeleteInlinePolicy(ctx interface{}, configMap interface{}, policyName interface{}, resourceName interface{}, resourceType interface{}) *mockDataAccessRepository_DeleteInlinePolicy_Call {
	return &mockDataAccessRepository_DeleteInlinePolicy_Call{Call: _e.mock.On("DeleteInlinePolicy", ctx, configMap, policyName, resourceName, resourceType)}
}

func (_c *mockDataAccessRepository_DeleteInlinePolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyName string, resourceName string, resourceType string)) *mockDataAccessRepository_DeleteInlinePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DeleteInlinePolicy_Call) Return(_a0 error) *mockDataAccessRepository_DeleteInlinePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_DeleteInlinePolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, string, string) error) *mockDataAccessRepository_DeleteInlinePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedPolicy provides a mock function with given fields: ctx, configMap, policyName
func (_m *mockDataAccessRepository) DeleteManagedPolicy(ctx context.Context, configMap *config.ConfigMap, policyName string) error {
	ret := _m.Called(ctx, configMap, policyName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string) error); ok {
		r0 = rf(ctx, configMap, policyName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DeleteManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedPolicy'
type mockDataAccessRepository_DeleteManagedPolicy_Call struct {
	*mock.Call
}

// DeleteManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyName string
func (_e *mockDataAccessRepository_Expecter) DeleteManagedPolicy(ctx interface{}, configMap interface{}, policyName interface{}) *mockDataAccessRepository_DeleteManagedPolicy_Call {
	return &mockDataAccessRepository_DeleteManagedPolicy_Call{Call: _e.mock.On("DeleteManagedPolicy", ctx, configMap, policyName)}
}

func (_c *mockDataAccessRepository_DeleteManagedPolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyName string)) *mockDataAccessRepository_DeleteManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DeleteManagedPolicy_Call) Return(_a0 error) *mockDataAccessRepository_DeleteManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_DeleteManagedPolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string) error) *mockDataAccessRepository_DeleteManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: ctx, configMap, name
func (_m *mockDataAccessRepository) DeleteRole(ctx context.Context, configMap *config.ConfigMap, name string) error {
	ret := _m.Called(ctx, configMap, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string) error); ok {
		r0 = rf(ctx, configMap, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type mockDataAccessRepository_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - name string
func (_e *mockDataAccessRepository_Expecter) DeleteRole(ctx interface{}, configMap interface{}, name interface{}) *mockDataAccessRepository_DeleteRole_Call {
	return &mockDataAccessRepository_DeleteRole_Call{Call: _e.mock.On("DeleteRole", ctx, configMap, name)}
}

func (_c *mockDataAccessRepository_DeleteRole_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, name string)) *mockDataAccessRepository_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DeleteRole_Call) Return(_a0 error) *mockDataAccessRepository_DeleteRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_DeleteRole_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string) error) *mockDataAccessRepository_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// DetachGroupFromManagedPolicy provides a mock function with given fields: ctx, configMap, policyArn, groupNames
func (_m *mockDataAccessRepository) DetachGroupFromManagedPolicy(ctx context.Context, configMap *config.ConfigMap, policyArn string, groupNames []string) error {
	ret := _m.Called(ctx, configMap, policyArn, groupNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, []string) error); ok {
		r0 = rf(ctx, configMap, policyArn, groupNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DetachGroupFromManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachGroupFromManagedPolicy'
type mockDataAccessRepository_DetachGroupFromManagedPolicy_Call struct {
	*mock.Call
}

// DetachGroupFromManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyArn string
//   - groupNames []string
func (_e *mockDataAccessRepository_Expecter) DetachGroupFromManagedPolicy(ctx interface{}, configMap interface{}, policyArn interface{}, groupNames interface{}) *mockDataAccessRepository_DetachGroupFromManagedPolicy_Call {
	return &mockDataAccessRepository_DetachGroupFromManagedPolicy_Call{Call: _e.mock.On("DetachGroupFromManagedPolicy", ctx, configMap, policyArn, groupNames)}
}

func (_c *mockDataAccessRepository_DetachGroupFromManagedPolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyArn string, groupNames []string)) *mockDataAccessRepository_DetachGroupFromManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DetachGroupFromManagedPolicy_Call) Return(_a0 error) *mockDataAccessRepository_DetachGroupFromManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_DetachGroupFromManagedPolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, []string) error) *mockDataAccessRepository_DetachGroupFromManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DetachRoleFromManagedPolicy provides a mock function with given fields: ctx, configMap, policyArn, roleNames
func (_m *mockDataAccessRepository) DetachRoleFromManagedPolicy(ctx context.Context, configMap *config.ConfigMap, policyArn string, roleNames []string) error {
	ret := _m.Called(ctx, configMap, policyArn, roleNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, []string) error); ok {
		r0 = rf(ctx, configMap, policyArn, roleNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DetachRoleFromManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachRoleFromManagedPolicy'
type mockDataAccessRepository_DetachRoleFromManagedPolicy_Call struct {
	*mock.Call
}

// DetachRoleFromManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyArn string
//   - roleNames []string
func (_e *mockDataAccessRepository_Expecter) DetachRoleFromManagedPolicy(ctx interface{}, configMap interface{}, policyArn interface{}, roleNames interface{}) *mockDataAccessRepository_DetachRoleFromManagedPolicy_Call {
	return &mockDataAccessRepository_DetachRoleFromManagedPolicy_Call{Call: _e.mock.On("DetachRoleFromManagedPolicy", ctx, configMap, policyArn, roleNames)}
}

func (_c *mockDataAccessRepository_DetachRoleFromManagedPolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyArn string, roleNames []string)) *mockDataAccessRepository_DetachRoleFromManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DetachRoleFromManagedPolicy_Call) Return(_a0 error) *mockDataAccessRepository_DetachRoleFromManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_DetachRoleFromManagedPolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, []string) error) *mockDataAccessRepository_DetachRoleFromManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DetachUserFromManagedPolicy provides a mock function with given fields: ctx, configMap, policyArn, userNames
func (_m *mockDataAccessRepository) DetachUserFromManagedPolicy(ctx context.Context, configMap *config.ConfigMap, policyArn string, userNames []string) error {
	ret := _m.Called(ctx, configMap, policyArn, userNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, []string) error); ok {
		r0 = rf(ctx, configMap, policyArn, userNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DetachUserFromManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachUserFromManagedPolicy'
type mockDataAccessRepository_DetachUserFromManagedPolicy_Call struct {
	*mock.Call
}

// DetachUserFromManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyArn string
//   - userNames []string
func (_e *mockDataAccessRepository_Expecter) DetachUserFromManagedPolicy(ctx interface{}, configMap interface{}, policyArn interface{}, userNames interface{}) *mockDataAccessRepository_DetachUserFromManagedPolicy_Call {
	return &mockDataAccessRepository_DetachUserFromManagedPolicy_Call{Call: _e.mock.On("DetachUserFromManagedPolicy", ctx, configMap, policyArn, userNames)}
}

func (_c *mockDataAccessRepository_DetachUserFromManagedPolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyArn string, userNames []string)) *mockDataAccessRepository_DetachUserFromManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DetachUserFromManagedPolicy_Call) Return(_a0 error) *mockDataAccessRepository_DetachUserFromManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_DetachUserFromManagedPolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, []string) error) *mockDataAccessRepository_DetachUserFromManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttachedEntity provides a mock function with given fields: ap
func (_m *mockDataAccessRepository) GetAttachedEntity(ap sync_to_target.AccessProvider) (string, string, error) {
	ret := _m.Called(ap)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(sync_to_target.AccessProvider) (string, string, error)); ok {
		return rf(ap)
	}
	if rf, ok := ret.Get(0).(func(sync_to_target.AccessProvider) string); ok {
		r0 = rf(ap)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(sync_to_target.AccessProvider) string); ok {
		r1 = rf(ap)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(sync_to_target.AccessProvider) error); ok {
		r2 = rf(ap)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockDataAccessRepository_GetAttachedEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttachedEntity'
type mockDataAccessRepository_GetAttachedEntity_Call struct {
	*mock.Call
}

// GetAttachedEntity is a helper method to define mock.On call
//   - ap sync_to_target.AccessProvider
func (_e *mockDataAccessRepository_Expecter) GetAttachedEntity(ap interface{}) *mockDataAccessRepository_GetAttachedEntity_Call {
	return &mockDataAccessRepository_GetAttachedEntity_Call{Call: _e.mock.On("GetAttachedEntity", ap)}
}

func (_c *mockDataAccessRepository_GetAttachedEntity_Call) Run(run func(ap sync_to_target.AccessProvider)) *mockDataAccessRepository_GetAttachedEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sync_to_target.AccessProvider))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetAttachedEntity_Call) Return(_a0 string, _a1 string, _a2 error) *mockDataAccessRepository_GetAttachedEntity_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockDataAccessRepository_GetAttachedEntity_Call) RunAndReturn(run func(sync_to_target.AccessProvider) (string, string, error)) *mockDataAccessRepository_GetAttachedEntity_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields: ctx, configMap, withDetails
func (_m *mockDataAccessRepository) GetGroups(ctx context.Context, configMap *config.ConfigMap, withDetails bool) ([]GroupEntity, error) {
	ret := _m.Called(ctx, configMap, withDetails)

	var r0 []GroupEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, bool) ([]GroupEntity, error)); ok {
		return rf(ctx, configMap, withDetails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, bool) []GroupEntity); ok {
		r0 = rf(ctx, configMap, withDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GroupEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, bool) error); ok {
		r1 = rf(ctx, configMap, withDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type mockDataAccessRepository_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - withDetails bool
func (_e *mockDataAccessRepository_Expecter) GetGroups(ctx interface{}, configMap interface{}, withDetails interface{}) *mockDataAccessRepository_GetGroups_Call {
	return &mockDataAccessRepository_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx, configMap, withDetails)}
}

func (_c *mockDataAccessRepository_GetGroups_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, withDetails bool)) *mockDataAccessRepository_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(bool))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetGroups_Call) Return(_a0 []GroupEntity, _a1 error) *mockDataAccessRepository_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetGroups_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, bool) ([]GroupEntity, error)) *mockDataAccessRepository_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetInlinePoliciesForEntities provides a mock function with given fields: ctx, configMap, entityNames, entityType
func (_m *mockDataAccessRepository) GetInlinePoliciesForEntities(ctx context.Context, configMap *config.ConfigMap, entityNames []string, entityType string) (map[string][]PolicyEntity, error) {
	ret := _m.Called(ctx, configMap, entityNames, entityType)

	var r0 map[string][]PolicyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, []string, string) (map[string][]PolicyEntity, error)); ok {
		return rf(ctx, configMap, entityNames, entityType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, []string, string) map[string][]PolicyEntity); ok {
		r0 = rf(ctx, configMap, entityNames, entityType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]PolicyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, []string, string) error); ok {
		r1 = rf(ctx, configMap, entityNames, entityType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetInlinePoliciesForEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInlinePoliciesForEntities'
type mockDataAccessRepository_GetInlinePoliciesForEntities_Call struct {
	*mock.Call
}

// GetInlinePoliciesForEntities is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - entityNames []string
//   - entityType string
func (_e *mockDataAccessRepository_Expecter) GetInlinePoliciesForEntities(ctx interface{}, configMap interface{}, entityNames interface{}, entityType interface{}) *mockDataAccessRepository_GetInlinePoliciesForEntities_Call {
	return &mockDataAccessRepository_GetInlinePoliciesForEntities_Call{Call: _e.mock.On("GetInlinePoliciesForEntities", ctx, configMap, entityNames, entityType)}
}

func (_c *mockDataAccessRepository_GetInlinePoliciesForEntities_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, entityNames []string, entityType string)) *mockDataAccessRepository_GetInlinePoliciesForEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].([]string), args[3].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetInlinePoliciesForEntities_Call) Return(_a0 map[string][]PolicyEntity, _a1 error) *mockDataAccessRepository_GetInlinePoliciesForEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetInlinePoliciesForEntities_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, []string, string) (map[string][]PolicyEntity, error)) *mockDataAccessRepository_GetInlinePoliciesForEntities_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedPolicies provides a mock function with given fields: ctx, configMap, withAttachedEntities
func (_m *mockDataAccessRepository) GetManagedPolicies(ctx context.Context, configMap *config.ConfigMap, withAttachedEntities bool) ([]PolicyEntity, error) {
	ret := _m.Called(ctx, configMap, withAttachedEntities)

	var r0 []PolicyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, bool) ([]PolicyEntity, error)); ok {
		return rf(ctx, configMap, withAttachedEntities)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, bool) []PolicyEntity); ok {
		r0 = rf(ctx, configMap, withAttachedEntities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PolicyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, bool) error); ok {
		r1 = rf(ctx, configMap, withAttachedEntities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetManagedPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedPolicies'
type mockDataAccessRepository_GetManagedPolicies_Call struct {
	*mock.Call
}

// GetManagedPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - withAttachedEntities bool
func (_e *mockDataAccessRepository_Expecter) GetManagedPolicies(ctx interface{}, configMap interface{}, withAttachedEntities interface{}) *mockDataAccessRepository_GetManagedPolicies_Call {
	return &mockDataAccessRepository_GetManagedPolicies_Call{Call: _e.mock.On("GetManagedPolicies", ctx, configMap, withAttachedEntities)}
}

func (_c *mockDataAccessRepository_GetManagedPolicies_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, withAttachedEntities bool)) *mockDataAccessRepository_GetManagedPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(bool))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetManagedPolicies_Call) Return(_a0 []PolicyEntity, _a1 error) *mockDataAccessRepository_GetManagedPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetManagedPolicies_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, bool) ([]PolicyEntity, error)) *mockDataAccessRepository_GetManagedPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyArn provides a mock function with given fields: policyName, configMap
func (_m *mockDataAccessRepository) GetPolicyArn(policyName string, configMap *config.ConfigMap) string {
	ret := _m.Called(policyName, configMap)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *config.ConfigMap) string); ok {
		r0 = rf(policyName, configMap)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockDataAccessRepository_GetPolicyArn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyArn'
type mockDataAccessRepository_GetPolicyArn_Call struct {
	*mock.Call
}

// GetPolicyArn is a helper method to define mock.On call
//   - policyName string
//   - configMap *config.ConfigMap
func (_e *mockDataAccessRepository_Expecter) GetPolicyArn(policyName interface{}, configMap interface{}) *mockDataAccessRepository_GetPolicyArn_Call {
	return &mockDataAccessRepository_GetPolicyArn_Call{Call: _e.mock.On("GetPolicyArn", policyName, configMap)}
}

func (_c *mockDataAccessRepository_GetPolicyArn_Call) Run(run func(policyName string, configMap *config.ConfigMap)) *mockDataAccessRepository_GetPolicyArn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*config.ConfigMap))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetPolicyArn_Call) Return(_a0 string) *mockDataAccessRepository_GetPolicyArn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GetPolicyArn_Call) RunAndReturn(run func(string, *config.ConfigMap) string) *mockDataAccessRepository_GetPolicyArn_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrincipalsFromAssumeRolePolicyDocument provides a mock function with given fields: ctx, configMap, policyDocument
func (_m *mockDataAccessRepository) GetPrincipalsFromAssumeRolePolicyDocument(ctx context.Context, configMap *config.ConfigMap, policyDocument *string) ([]string, error) {
	ret := _m.Called(ctx, configMap, policyDocument)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, *string) ([]string, error)); ok {
		return rf(ctx, configMap, policyDocument)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, *string) []string); ok {
		r0 = rf(ctx, configMap, policyDocument)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, *string) error); ok {
		r1 = rf(ctx, configMap, policyDocument)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetPrincipalsFromAssumeRolePolicyDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrincipalsFromAssumeRolePolicyDocument'
type mockDataAccessRepository_GetPrincipalsFromAssumeRolePolicyDocument_Call struct {
	*mock.Call
}

// GetPrincipalsFromAssumeRolePolicyDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyDocument *string
func (_e *mockDataAccessRepository_Expecter) GetPrincipalsFromAssumeRolePolicyDocument(ctx interface{}, configMap interface{}, policyDocument interface{}) *mockDataAccessRepository_GetPrincipalsFromAssumeRolePolicyDocument_Call {
	return &mockDataAccessRepository_GetPrincipalsFromAssumeRolePolicyDocument_Call{Call: _e.mock.On("GetPrincipalsFromAssumeRolePolicyDocument", ctx, configMap, policyDocument)}
}

func (_c *mockDataAccessRepository_GetPrincipalsFromAssumeRolePolicyDocument_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyDocument *string)) *mockDataAccessRepository_GetPrincipalsFromAssumeRolePolicyDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(*string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetPrincipalsFromAssumeRolePolicyDocument_Call) Return(_a0 []string, _a1 error) *mockDataAccessRepository_GetPrincipalsFromAssumeRolePolicyDocument_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetPrincipalsFromAssumeRolePolicyDocument_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, *string) ([]string, error)) *mockDataAccessRepository_GetPrincipalsFromAssumeRolePolicyDocument_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields: ctx, configMap
func (_m *mockDataAccessRepository) GetRoles(ctx context.Context, configMap *config.ConfigMap) ([]RoleEntity, error) {
	ret := _m.Called(ctx, configMap)

	var r0 []RoleEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) ([]RoleEntity, error)); ok {
		return rf(ctx, configMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) []RoleEntity); ok {
		r0 = rf(ctx, configMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap) error); ok {
		r1 = rf(ctx, configMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type mockDataAccessRepository_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
func (_e *mockDataAccessRepository_Expecter) GetRoles(ctx interface{}, configMap interface{}) *mockDataAccessRepository_GetRoles_Call {
	return &mockDataAccessRepository_GetRoles_Call{Call: _e.mock.On("GetRoles", ctx, configMap)}
}

func (_c *mockDataAccessRepository_GetRoles_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap)) *mockDataAccessRepository_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetRoles_Call) Return(_a0 []RoleEntity, _a1 error) *mockDataAccessRepository_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetRoles_Call) RunAndReturn(run func(context.Context, *config.ConfigMap) ([]RoleEntity, error)) *mockDataAccessRepository_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, configMap, withDetails
func (_m *mockDataAccessRepository) GetUsers(ctx context.Context, configMap *config.ConfigMap, withDetails bool) ([]UserEntity, error) {
	ret := _m.Called(ctx, configMap, withDetails)

	var r0 []UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, bool) ([]UserEntity, error)); ok {
		return rf(ctx, configMap, withDetails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, bool) []UserEntity); ok {
		r0 = rf(ctx, configMap, withDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, bool) error); ok {
		r1 = rf(ctx, configMap, withDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type mockDataAccessRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - withDetails bool
func (_e *mockDataAccessRepository_Expecter) GetUsers(ctx interface{}, configMap interface{}, withDetails interface{}) *mockDataAccessRepository_GetUsers_Call {
	return &mockDataAccessRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, configMap, withDetails)}
}

func (_c *mockDataAccessRepository_GetUsers_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, withDetails bool)) *mockDataAccessRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(bool))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetUsers_Call) Return(_a0 []UserEntity, _a1 error) *mockDataAccessRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetUsers_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, bool) ([]UserEntity, error)) *mockDataAccessRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssumeEntities provides a mock function with given fields: ctx, configMap, roleName, userNames
func (_m *mockDataAccessRepository) UpdateAssumeEntities(ctx context.Context, configMap *config.ConfigMap, roleName string, userNames []string) error {
	ret := _m.Called(ctx, configMap, roleName, userNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, []string) error); ok {
		r0 = rf(ctx, configMap, roleName, userNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_UpdateAssumeEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssumeEntities'
type mockDataAccessRepository_UpdateAssumeEntities_Call struct {
	*mock.Call
}

// UpdateAssumeEntities is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - roleName string
//   - userNames []string
func (_e *mockDataAccessRepository_Expecter) UpdateAssumeEntities(ctx interface{}, configMap interface{}, roleName interface{}, userNames interface{}) *mockDataAccessRepository_UpdateAssumeEntities_Call {
	return &mockDataAccessRepository_UpdateAssumeEntities_Call{Call: _e.mock.On("UpdateAssumeEntities", ctx, configMap, roleName, userNames)}
}

func (_c *mockDataAccessRepository_UpdateAssumeEntities_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, roleName string, userNames []string)) *mockDataAccessRepository_UpdateAssumeEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *mockDataAccessRepository_UpdateAssumeEntities_Call) Return(_a0 error) *mockDataAccessRepository_UpdateAssumeEntities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_UpdateAssumeEntities_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, []string) error) *mockDataAccessRepository_UpdateAssumeEntities_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInlinePolicy provides a mock function with given fields: ctx, configMap, policyName, resourceName, resourceType, statements
func (_m *mockDataAccessRepository) UpdateInlinePolicy(ctx context.Context, configMap *config.ConfigMap, policyName string, resourceName string, resourceType string, statements []awspolicy.Statement) error {
	ret := _m.Called(ctx, configMap, policyName, resourceName, resourceType, statements)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, string, string, []awspolicy.Statement) error); ok {
		r0 = rf(ctx, configMap, policyName, resourceName, resourceType, statements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_UpdateInlinePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInlinePolicy'
type mockDataAccessRepository_UpdateInlinePolicy_Call struct {
	*mock.Call
}

// UpdateInlinePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyName string
//   - resourceName string
//   - resourceType string
//   - statements []awspolicy.Statement
func (_e *mockDataAccessRepository_Expecter) UpdateInlinePolicy(ctx interface{}, configMap interface{}, policyName interface{}, resourceName interface{}, resourceType interface{}, statements interface{}) *mockDataAccessRepository_UpdateInlinePolicy_Call {
	return &mockDataAccessRepository_UpdateInlinePolicy_Call{Call: _e.mock.On("UpdateInlinePolicy", ctx, configMap, policyName, resourceName, resourceType, statements)}
}

func (_c *mockDataAccessRepository_UpdateInlinePolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyName string, resourceName string, resourceType string, statements []awspolicy.Statement)) *mockDataAccessRepository_UpdateInlinePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].(string), args[4].(string), args[5].([]awspolicy.Statement))
	})
	return _c
}

func (_c *mockDataAccessRepository_UpdateInlinePolicy_Call) Return(_a0 error) *mockDataAccessRepository_UpdateInlinePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_UpdateInlinePolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, string, string, []awspolicy.Statement) error) *mockDataAccessRepository_UpdateInlinePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateManagedPolicy provides a mock function with given fields: ctx, configMap, policyName, statements
func (_m *mockDataAccessRepository) UpdateManagedPolicy(ctx context.Context, configMap *config.ConfigMap, policyName string, statements []awspolicy.Statement) error {
	ret := _m.Called(ctx, configMap, policyName, statements)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, []awspolicy.Statement) error); ok {
		r0 = rf(ctx, configMap, policyName, statements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_UpdateManagedPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateManagedPolicy'
type mockDataAccessRepository_UpdateManagedPolicy_Call struct {
	*mock.Call
}

// UpdateManagedPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - policyName string
//   - statements []awspolicy.Statement
func (_e *mockDataAccessRepository_Expecter) UpdateManagedPolicy(ctx interface{}, configMap interface{}, policyName interface{}, statements interface{}) *mockDataAccessRepository_UpdateManagedPolicy_Call {
	return &mockDataAccessRepository_UpdateManagedPolicy_Call{Call: _e.mock.On("UpdateManagedPolicy", ctx, configMap, policyName, statements)}
}

func (_c *mockDataAccessRepository_UpdateManagedPolicy_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, policyName string, statements []awspolicy.Statement)) *mockDataAccessRepository_UpdateManagedPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].([]awspolicy.Statement))
	})
	return _c
}

func (_c *mockDataAccessRepository_UpdateManagedPolicy_Call) Return(_a0 error) *mockDataAccessRepository_UpdateManagedPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_UpdateManagedPolicy_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, []awspolicy.Statement) error) *mockDataAccessRepository_UpdateManagedPolicy_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockDataAccessRepository interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDataAccessRepository creates a new instance of mockDataAccessRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDataAccessRepository(t mockConstructorTestingTnewMockDataAccessRepository) *mockDataAccessRepository {
	mock := &mockDataAccessRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
